module ColorSortLTL3_662_ColorSort_fixed_1
env boolean yBoolExpr_2;
env boolean detect_0;
env boolean detect_1;
env boolean detect_2;
env boolean ack_bot_0;
env boolean color_0;
env boolean color_1;
env boolean color_2;
env boolean speedButton_0;
env boolean nonemove;
env boolean onlybotmoves;
env boolean ack_ver_0;
env boolean allsleep;
env boolean ack_hor_0;
sys boolean yBoolExpr_3;
sys boolean spec_dropping;
sys boolean yBoolExpr_1;
sys boolean yBoolExpr_6;
sys boolean spec_currentColor_0;
sys boolean spec_currentColor_1;
sys boolean spec_currentColor_2;
sys boolean yBoolExpr_4;
sys boolean verMot_0;
sys boolean yBoolExpr_8;
sys boolean yBoolExpr_5;
sys boolean spec_state__return_0;
sys boolean spec_state__return_1;
sys boolean yBoolExpr_0;
sys boolean motSpeed_0;
sys boolean motSpeed_1;
sys boolean yBoolExpr_7;
sys boolean spec_speedButtonValidPressed;
sys boolean horMot_0;
sys boolean botMot_0;
sys boolean botMot_1;

assumption
	G((speedButton_0) <-> next(yBoolExpr_2));
guarantee
	G(!verMot_0 ->(!botMot_0 & botMot_1 & horMot_0));
guarantee
	G(!horMot_0 ->(!botMot_0 & botMot_1 & verMot_0));
guarantee
	G((botMot_0 | !botMot_1) ->(verMot_0 & horMot_0));
guarantee
	G(verMot_0 -> (spec_currentColor_0 <-> next(spec_currentColor_0)) & (spec_currentColor_1 <-> next(spec_currentColor_1)) & (spec_currentColor_2 <-> next(spec_currentColor_2)));
guarantee
	G(spec_dropping <-> next(spec_dropping) <-> verMot_0);
guarantee
	G((!ack_ver_0 | !ack_hor_0) -> allsleep);
guarantee
	G((!color_0 & color_1 & color_2 &(!spec_dropping)) -> allsleep);
guarantee
	G(((color_0 | !color_1 | !color_2) &(!spec_dropping)) ->(!verMot_0 & (color_0 <-> next(spec_currentColor_0)) & (color_1 <-> next(spec_currentColor_1)) & (color_2 <-> next(spec_currentColor_2)) & next(spec_dropping)));
guarantee
	G((!botMot_0 & !botMot_1) <-> next(yBoolExpr_0));
guarantee
	G(((nonemove & spec_dropping) |(yBoolExpr_0 & onlybotmoves & ((detect_0 <-> !spec_currentColor_0) | (detect_1 <-> !spec_currentColor_1) | (detect_2 <-> !spec_currentColor_2)))) -> !botMot_0 & !botMot_1);
guarantee
	G((!botMot_0 & !botMot_1) <-> next(yBoolExpr_1));
guarantee
	G((spec_dropping & onlybotmoves & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2) & yBoolExpr_1) -> !horMot_0);
guarantee
	!motSpeed_0 & !motSpeed_1 &(!spec_dropping);
guarantee
	G((!speedButton_0 & yBoolExpr_2) <-> spec_speedButtonValidPressed);
guarantee
	G((!motSpeed_0 & !motSpeed_1) <-> next(yBoolExpr_3));
guarantee
	G((spec_speedButtonValidPressed & yBoolExpr_3) -> !motSpeed_0 & motSpeed_1);
guarantee
	G((!motSpeed_0 & motSpeed_1) <-> next(yBoolExpr_4));
guarantee
	G((spec_speedButtonValidPressed & yBoolExpr_4) -> motSpeed_0 & !motSpeed_1);
guarantee
	G((motSpeed_0 & !motSpeed_1) <-> next(yBoolExpr_5));
guarantee
	G((spec_speedButtonValidPressed & yBoolExpr_5) -> !motSpeed_0 & !motSpeed_1);
guarantee
	G((!motSpeed_0 & !motSpeed_1) <-> next(yBoolExpr_6));
guarantee
	G(((!spec_speedButtonValidPressed) & yBoolExpr_6) -> !motSpeed_0 & !motSpeed_1);
guarantee
	G((!motSpeed_0 & motSpeed_1) <-> next(yBoolExpr_7));
guarantee
	G(((!spec_speedButtonValidPressed) & yBoolExpr_7) -> !motSpeed_0 & motSpeed_1);
guarantee
	G((motSpeed_0 & !motSpeed_1) <-> next(yBoolExpr_8));
guarantee
	G(((!spec_speedButtonValidPressed) & yBoolExpr_8) -> motSpeed_0 & !motSpeed_1);
assumption
	GF (TRUE);
