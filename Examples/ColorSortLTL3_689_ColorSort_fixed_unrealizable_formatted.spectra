module ColorSort
env boolean color_RED;

env boolean color_GREEN;

env boolean color_BLUE;

env boolean color_BLACK;

env boolean color_YELLOW;

env boolean color_WHITE;

env boolean color_RED;

env boolean color_GREEN;

env boolean color_BLUE;

env boolean color_BLACK;

env boolean color_YELLOW;

env boolean color_WHITE;

env boolean detect_RED;

env boolean detect_GREEN;

env boolean detect_BLUE;

env boolean detect_BLACK;

env boolean detect_YELLOW;

env boolean detect_WHITE;

env boolean color_RED;

env boolean color_GREEN;

env boolean color_BLUE;

env boolean color_BLACK;

env boolean color_YELLOW;

env boolean color_WHITE;

env boolean detect_RED;

env boolean detect_GREEN;

env boolean detect_BLUE;

env boolean detect_BLACK;

env boolean detect_YELLOW;

env boolean detect_WHITE;

env boolean ack_ver_MOVE;

env boolean ack_ver_SLEEP;

env boolean color_RED;

env boolean color_GREEN;

env boolean color_BLUE;

env boolean color_BLACK;

env boolean color_YELLOW;

env boolean color_WHITE;

env boolean detect_RED;

env boolean detect_GREEN;

env boolean detect_BLUE;

env boolean detect_BLACK;

env boolean detect_YELLOW;

env boolean detect_WHITE;

env boolean ack_ver_MOVE;

env boolean ack_ver_SLEEP;

env boolean ack_hor_MOVE;

env boolean ack_hor_SLEEP;

env boolean color_RED;

env boolean color_GREEN;

env boolean color_BLUE;

env boolean color_BLACK;

env boolean color_YELLOW;

env boolean color_WHITE;

env boolean detect_RED;

env boolean detect_GREEN;

env boolean detect_BLUE;

env boolean detect_BLACK;

env boolean detect_YELLOW;

env boolean detect_WHITE;

env boolean ack_ver_MOVE;

env boolean ack_ver_SLEEP;

env boolean ack_hor_MOVE;

env boolean ack_hor_SLEEP;

env boolean ack_bot_MOVE;

env boolean ack_bot_SLEEP;

		
		//ext haltButton: {PRESS, RELEASE};
env boolean color_RED;

env boolean color_GREEN;

env boolean color_BLUE;

env boolean color_BLACK;

env boolean color_YELLOW;

env boolean color_WHITE;

env boolean detect_RED;

env boolean detect_GREEN;

env boolean detect_BLUE;

env boolean detect_BLACK;

env boolean detect_YELLOW;

env boolean detect_WHITE;

env boolean ack_ver_MOVE;

env boolean ack_ver_SLEEP;

env boolean ack_hor_MOVE;

env boolean ack_hor_SLEEP;

env boolean ack_bot_MOVE;

env boolean ack_bot_SLEEP;

env boolean speedButton_PRESS;

env boolean speedButton_RELEASE;

sys boolean color_RED;

sys boolean color_GREEN;

sys boolean color_BLUE;

sys boolean color_BLACK;

sys boolean color_YELLOW;

sys boolean color_WHITE;

sys boolean detect_RED;

sys boolean detect_GREEN;

sys boolean detect_BLUE;

sys boolean detect_BLACK;

sys boolean detect_YELLOW;

sys boolean detect_WHITE;

sys boolean ack_ver_MOVE;

sys boolean ack_ver_SLEEP;

sys boolean ack_hor_MOVE;

sys boolean ack_hor_SLEEP;

sys boolean ack_bot_MOVE;

sys boolean ack_bot_SLEEP;

sys boolean speedButton_PRESS;

sys boolean speedButton_RELEASE;

sys boolean verMot_MOVE;

sys boolean verMot_SLEEP;

sys boolean color_RED;

sys boolean color_GREEN;

sys boolean color_BLUE;

sys boolean color_BLACK;

sys boolean color_YELLOW;

sys boolean color_WHITE;

sys boolean detect_RED;

sys boolean detect_GREEN;

sys boolean detect_BLUE;

sys boolean detect_BLACK;

sys boolean detect_YELLOW;

sys boolean detect_WHITE;

sys boolean ack_ver_MOVE;

sys boolean ack_ver_SLEEP;

sys boolean ack_hor_MOVE;

sys boolean ack_hor_SLEEP;

sys boolean ack_bot_MOVE;

sys boolean ack_bot_SLEEP;

sys boolean speedButton_PRESS;

sys boolean speedButton_RELEASE;

sys boolean verMot_MOVE;

sys boolean verMot_SLEEP;

sys boolean horMot_MOVE;

sys boolean horMot_SLEEP;

sys boolean color_RED;

sys boolean color_GREEN;

sys boolean color_BLUE;

sys boolean color_BLACK;

sys boolean color_YELLOW;

sys boolean color_WHITE;

sys boolean detect_RED;

sys boolean detect_GREEN;

sys boolean detect_BLUE;

sys boolean detect_BLACK;

sys boolean detect_YELLOW;

sys boolean detect_WHITE;

sys boolean ack_ver_MOVE;

sys boolean ack_ver_SLEEP;

sys boolean ack_hor_MOVE;

sys boolean ack_hor_SLEEP;

sys boolean ack_bot_MOVE;

sys boolean ack_bot_SLEEP;

sys boolean speedButton_PRESS;

sys boolean speedButton_RELEASE;

sys boolean verMot_MOVE;

sys boolean verMot_SLEEP;

sys boolean horMot_MOVE;

sys boolean horMot_SLEEP;

sys boolean botMot_SEEK;

sys boolean botMot_STOP;

sys boolean botMot_RETURN;

		
sys boolean color_RED;

sys boolean color_GREEN;

sys boolean color_BLUE;

sys boolean color_BLACK;

sys boolean color_YELLOW;

sys boolean color_WHITE;

sys boolean detect_RED;

sys boolean detect_GREEN;

sys boolean detect_BLUE;

sys boolean detect_BLACK;

sys boolean detect_YELLOW;

sys boolean detect_WHITE;

sys boolean ack_ver_MOVE;

sys boolean ack_ver_SLEEP;

sys boolean ack_hor_MOVE;

sys boolean ack_hor_SLEEP;

sys boolean ack_bot_MOVE;

sys boolean ack_bot_SLEEP;

sys boolean speedButton_PRESS;

sys boolean speedButton_RELEASE;

sys boolean verMot_MOVE;

sys boolean verMot_SLEEP;

sys boolean horMot_MOVE;

sys boolean horMot_SLEEP;

sys boolean botMot_SEEK;

sys boolean botMot_STOP;

sys boolean botMot_RETURN;

sys boolean motSpeed_LEVEL1;

sys boolean motSpeed_LEVEL2;

sys boolean motSpeed_LEVEL3;

		
sys boolean color_RED;

sys boolean color_GREEN;

sys boolean color_BLUE;

sys boolean color_BLACK;

sys boolean color_YELLOW;

sys boolean color_WHITE;

sys boolean detect_RED;

sys boolean detect_GREEN;

sys boolean detect_BLUE;

sys boolean detect_BLACK;

sys boolean detect_YELLOW;

sys boolean detect_WHITE;

sys boolean ack_ver_MOVE;

sys boolean ack_ver_SLEEP;

sys boolean ack_hor_MOVE;

sys boolean ack_hor_SLEEP;

sys boolean ack_bot_MOVE;

sys boolean ack_bot_SLEEP;

sys boolean speedButton_PRESS;

sys boolean speedButton_RELEASE;

sys boolean verMot_MOVE;

sys boolean verMot_SLEEP;

sys boolean horMot_MOVE;

sys boolean horMot_SLEEP;

sys boolean botMot_SEEK;

sys boolean botMot_STOP;

sys boolean botMot_RETURN;

sys boolean motSpeed_LEVEL1;

sys boolean motSpeed_LEVEL2;

sys boolean motSpeed_LEVEL3;

sys boolean spec_state_seek_S0;

sys boolean spec_state_seek_S1;

sys boolean spec_state_seek_S2;

sys boolean spec_state_seek_S3;

sys boolean color_RED;

sys boolean color_GREEN;

sys boolean color_BLUE;

sys boolean color_BLACK;

sys boolean color_YELLOW;

sys boolean color_WHITE;

sys boolean detect_RED;

sys boolean detect_GREEN;

sys boolean detect_BLUE;

sys boolean detect_BLACK;

sys boolean detect_YELLOW;

sys boolean detect_WHITE;

sys boolean ack_ver_MOVE;

sys boolean ack_ver_SLEEP;

sys boolean ack_hor_MOVE;

sys boolean ack_hor_SLEEP;

sys boolean ack_bot_MOVE;

sys boolean ack_bot_SLEEP;

sys boolean speedButton_PRESS;

sys boolean speedButton_RELEASE;

sys boolean verMot_MOVE;

sys boolean verMot_SLEEP;

sys boolean horMot_MOVE;

sys boolean horMot_SLEEP;

sys boolean botMot_SEEK;

sys boolean botMot_STOP;

sys boolean botMot_RETURN;

sys boolean motSpeed_LEVEL1;

sys boolean motSpeed_LEVEL2;

sys boolean motSpeed_LEVEL3;

sys boolean spec_state_seek_S0;

sys boolean spec_state_seek_S1;

sys boolean spec_state_seek_S2;

sys boolean spec_state_seek_S3;

sys boolean spec_state_return_S0;

sys boolean spec_state_return_S1;

sys boolean spec_state_return_S2;

		
sys boolean color_RED;

sys boolean color_GREEN;

sys boolean color_BLUE;

sys boolean color_BLACK;

sys boolean color_YELLOW;

sys boolean color_WHITE;

sys boolean detect_RED;

sys boolean detect_GREEN;

sys boolean detect_BLUE;

sys boolean detect_BLACK;

sys boolean detect_YELLOW;

sys boolean detect_WHITE;

sys boolean ack_ver_MOVE;

sys boolean ack_ver_SLEEP;

sys boolean ack_hor_MOVE;

sys boolean ack_hor_SLEEP;

sys boolean ack_bot_MOVE;

sys boolean ack_bot_SLEEP;

sys boolean speedButton_PRESS;

sys boolean speedButton_RELEASE;

sys boolean verMot_MOVE;

sys boolean verMot_SLEEP;

sys boolean horMot_MOVE;

sys boolean horMot_SLEEP;

sys boolean botMot_SEEK;

sys boolean botMot_STOP;

sys boolean botMot_RETURN;

sys boolean motSpeed_LEVEL1;

sys boolean motSpeed_LEVEL2;

sys boolean motSpeed_LEVEL3;

sys boolean spec_state_seek_S0;

sys boolean spec_state_seek_S1;

sys boolean spec_state_seek_S2;

sys boolean spec_state_seek_S3;

sys boolean spec_state_return_S0;

sys boolean spec_state_return_S1;

sys boolean spec_state_return_S2;

sys boolean spec_currentColor_RED;

sys boolean spec_currentColor_GREEN;

sys boolean spec_currentColor_BLUE;

sys boolean spec_currentColor_BLACK;

sys boolean spec_currentColor_YELLOW;

sys boolean spec_currentColor_WHITE;

		sys boolean spec_dropping ;
		
		sys boolean spec_speedButtonValidPressed ;
		/*ext spec_haltButtonValidPressed : boolean;
		
		ext spec_pausing : {PAUSE, GO};*/
		
		
define -- allsleep is true iff all motors sleep
	allsleep := verMot_SLEEP  & horMot_SLEEP & botMot_STOP;
define -- nonemove is true iff no motor moves
	nonemove := ack_ver_SLEEP & ack_hor_SLEEP & ack_bot_SLEEP;
define -- nonemove is true iff no motor moves
	onlybotmoves := ack_ver_SLEEP & ack_hor_SLEEP & ack_bot_MOVE;

guarantee
	G (spec_prevBotMotReturn<->PREV(botMot_RETURN));
guarantee
	G (spec_prevBotMotSeek<->PREV(botMot_SEEK));
  
  sys boolean spec_prevBotMotReturn ;
  sys boolean spec_prevBotMotSeek ;

guarantee -- only one motors moves at a time
	G (verMot_MOVE -> (botMot_STOP & horMot_SLEEP));
	
guarantee 
	G (horMot_MOVE -> (botMot_STOP & verMot_SLEEP));
	
guarantee 
	G (!botMot_STOP -> (verMot_SLEEP & horMot_SLEEP));

guarantee
	G (verMot_SLEEP -> spec_currentColor = next(spec_currentColor));
	
guarantee
	G (spec_dropping = next(spec_dropping) <-> verMot_SLEEP & !(spec_prevBotMotReturn & ack_bot_SLEEP));

guarantee
	G (ack_ver_MOVE | ack_hor_MOVE -> allsleep);
/*	
LTLSPECENV
	G (!spec_dropping -> nonemove);
	*/ 
guarantee
  respondsTo(!color_BLACK,(horMot_MOVE&detect=spec_currentColor));

guarantee
  GF (horMot_MOVE);
	
-- running the robot

guarantee
	G (color_BLACK & !spec_dropping -> allsleep);
	
guarantee
	G (!color_BLACK & !spec_dropping -> verMot_MOVE & next(spec_currentColor) = color);

guarantee
	G (nonemove & spec_dropping & PREV(ack_ver_MOVE)-> botMot_SEEK);
 
-- P19
-- (spec_dropping & detect != spec_currentColor -> botMot_SEEK) is true between (spec_prevBotMotSeek & ack_bot_MOVE) and (spec_prevBotMotSeek & detect = spec_currentColor)
guarantee -- initial assignments: initial spec_state_seek
  spec_state_seek_S0;

guarantee -- safety this and next spec_state_seek
  G ((spec_state_seek_S0 & ((!(spec_prevBotMotSeek & ack_bot_MOVE)) | ((spec_prevBotMotSeek & detect = spec_currentColor) & (spec_prevBotMotSeek & ack_bot_MOVE))) & next(spec_state_seek_S0)) |
  (spec_state_seek_S0 & (!(spec_prevBotMotSeek & detect = spec_currentColor) & (spec_dropping & detect != spec_currentColor -> botMot_SEEK) & (spec_prevBotMotSeek & ack_bot_MOVE)) & next(spec_state_seek_S1)) |
  (spec_state_seek_S0 & (!(spec_prevBotMotSeek & detect = spec_currentColor) & !(spec_dropping & detect != spec_currentColor -> botMot_SEEK) & (spec_prevBotMotSeek & ack_bot_MOVE)) & next(spec_state_seek_S3)) |
  (spec_state_seek_S1 & ((spec_prevBotMotSeek & detect = spec_currentColor)) & next(spec_state_seek_S0)) |
  (spec_state_seek_S1 & (!(spec_prevBotMotSeek & detect = spec_currentColor) & (spec_dropping & detect != spec_currentColor -> botMot_SEEK)) & next(spec_state_seek_S1)) |
  (spec_state_seek_S1 & (!(spec_prevBotMotSeek & detect = spec_currentColor) & !(spec_dropping & detect != spec_currentColor -> botMot_SEEK)) & next(spec_state_seek_S3)) |
  (spec_state_seek_S2 & next(spec_state_seek_S2)) |
  (spec_state_seek_S3 & ((spec_prevBotMotSeek & detect = spec_currentColor)) & next(spec_state_seek_S2)) |
  (spec_state_seek_S3 & (!(spec_prevBotMotSeek & detect = spec_currentColor)) & next(spec_state_seek_S3)));

guarantee -- equivalence of satisfaction
  GF (spec_state_seek_S0|spec_state_seek_S1|spec_state_seek_S3);

guarantee
	G (spec_dropping & onlybotmoves & detect = spec_currentColor & PREV(botMot_SEEK) <-> horMot_MOVE);
 	
guarantee
	G (nonemove & PREV(ack_hor_MOVE) & spec_dropping -> botMot_RETURN);
-- P20
-- (spec_dropping & onlybotmoves -> botMot_RETURN) is true after (spec_prevBotMotReturn & ack_bot_MOVE) until (spec_prevBotMotReturn & ack_bot_SLEEP)
guarantee -- initial assignments: initial spec_state_return
  spec_state_return_S0;

guarantee -- safety this and next spec_state_return
  G ((spec_state_return_S0 & ((!(spec_prevBotMotReturn & ack_bot_MOVE) & !(spec_prevBotMotReturn & ack_bot_SLEEP)) | ((spec_prevBotMotReturn & ack_bot_SLEEP))) & next(spec_state_return_S0)) |
  (spec_state_return_S0 & ((spec_prevBotMotReturn & ack_bot_MOVE) & !(spec_dropping & onlybotmoves -> botMot_RETURN) & !(spec_prevBotMotReturn & ack_bot_SLEEP)) & next(spec_state_return_S1)) |
  (spec_state_return_S0 & ((spec_prevBotMotReturn & ack_bot_MOVE) & (spec_dropping & onlybotmoves -> botMot_RETURN) & !(spec_prevBotMotReturn & ack_bot_SLEEP)) & next(spec_state_return_S2)) |
  (spec_state_return_S1 & next(spec_state_return_S1)) |
  (spec_state_return_S2 & ((spec_prevBotMotReturn & ack_bot_SLEEP)) & next(spec_state_return_S0)) |
  (spec_state_return_S2 & (!(spec_dropping & onlybotmoves -> botMot_RETURN) & !(spec_prevBotMotReturn & ack_bot_SLEEP)) & next(spec_state_return_S1)) |
  (spec_state_return_S2 & ((spec_dropping & onlybotmoves -> botMot_RETURN) & !(spec_prevBotMotReturn & ack_bot_SLEEP)) & next(spec_state_return_S2)));

guarantee -- equivalence of satisfaction
  GF (spec_state_return_S0|spec_state_return_S2);
 
guarantee
	G (spec_prevBotMotReturn & ack_bot_SLEEP -> allsleep);

-- speed button

guarantee
	motSpeed_LEVEL1 & !spec_dropping;

guarantee
	G (speedButton_PRESS & PREV(speedButton_RELEASE) <-> spec_speedButtonValidPressed);


guarantee -- if the speed button is pressed, increase the speed by one level
	G (spec_speedButtonValidPressed & PREV(motSpeed_LEVEL1) -> motSpeed_LEVEL2);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (spec_speedButtonValidPressed & PREV(motSpeed_LEVEL2) -> motSpeed_LEVEL3);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (spec_speedButtonValidPressed & PREV(motSpeed_LEVEL3) -> motSpeed_LEVEL1);
	 
	 
guarantee -- if the speed button is released, the speed remains the same
	G (!spec_speedButtonValidPressed & PREV(motSpeed_LEVEL1) -> motSpeed_LEVEL1);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (!spec_speedButtonValidPressed & PREV(motSpeed_LEVEL2) -> motSpeed_LEVEL2);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (!spec_speedButtonValidPressed & PREV(motSpeed_LEVEL3) -> motSpeed_LEVEL3);
/* 
-- pause button

LTLSPEC
	G (haltButton = PRESS & PREV(haltButton = RELEASE) <-> spec_haltButtonValidPressed);

LTLSPEC
	G ((spec_haltButtonValidPressed & spec_pausing = GO) | (!spec_haltButtonValidPressed & spec_pausing = PAUSE)
		-> next(spec_pausing) = PAUSE);
	
LTLSPEC
	G ((!spec_haltButtonValidPressed & spec_pausing = GO) | (spec_haltButtonValidPressed & spec_pausing = PAUSE)
		-> next(spec_pausing) = GO);

LTLSPECENV -- no pause is eternal
	G (spec_pausing = PAUSE -> F (spec_pausing = GO));
*/
-- Some environment specifications

  sys boolean spec_waiting_ack_ver_mot;
  sys boolean spec_waiting_ack_hor_mot;

guarantee -- initial state
  !spec_waiting_ack_ver_mot; -- not waiting for acknowledgement (only sleeping is allowed)
  
guarantee -- transitions
  G(!spec_waiting_ack_ver_mot & !verMot_MOVE -> next(!spec_waiting_ack_ver_mot));
guarantee
  G (!spec_waiting_ack_ver_mot & verMot_MOVE -> next(spec_waiting_ack_ver_mot));
guarantee
  G (spec_waiting_ack_ver_mot & ack_ver_SLEEP -> next(!spec_waiting_ack_ver_mot));
guarantee
  G (spec_waiting_ack_ver_mot & !ack_ver_SLEEP -> next(spec_waiting_ack_ver_mot));

assumption -- while we are not waiting motor can only acknowledge sleeping
  G(!spec_waiting_ack_ver_mot -> ack_ver_SLEEP);
assumption -- on move command acknowledge moving
  G(verMot_MOVE -> next(ack_ver_MOVE));
assumption -- if we are waiting motor has to eventually acknowledge finishing
  respondsTo(spec_waiting_ack_ver_mot,(ack_ver_SLEEP));
  
  
guarantee -- initial state
  !spec_waiting_ack_hor_mot; -- not waiting for acknowledgement (only sleeping is allowed)
  
guarantee -- transitions
  G(!spec_waiting_ack_hor_mot & !horMot_MOVE -> next(!spec_waiting_ack_hor_mot));
guarantee
  G (!spec_waiting_ack_hor_mot & horMot_MOVE -> next(spec_waiting_ack_hor_mot));
guarantee
  G (spec_waiting_ack_hor_mot & ack_hor_SLEEP -> next(!spec_waiting_ack_hor_mot));
guarantee
  G (spec_waiting_ack_hor_mot & !ack_hor_SLEEP -> next(spec_waiting_ack_hor_mot));

assumption -- while we are not waiting motor can only acknowledge sleeping
  G(!spec_waiting_ack_hor_mot -> ack_hor_SLEEP);
assumption -- on move command acknowledge moving
  G(horMot_MOVE -> next(ack_hor_MOVE));
assumption -- if we are waiting motor has to eventually acknowledge finishing
  respondsTo(spec_waiting_ack_hor_mot,(ack_hor_SLEEP));
  
/*   
LTLSPECENV
	G (ack_ver_MOVE -> F (ack_ver_SLEEP));
LTLSPECENV
	G (ack_hor_MOVE -> F (ack_hor_SLEEP));*/
assumption
  respondsTo(ack_bot_MOVE,(ack_bot_SLEEP));
	/* 
LTLSPECENV -- unfinisheds
	G (botMot_SEEK );
*/
/* 
LTLSPECENV
	G F (ack_hor_MOVE);
*/	
assumption -- there will always be a cube
  GF (!color_BLACK);

pattern respondsTo(trigger, response) {
  var boolean responded;
  responded;
  G (next(responded) iff (response or responded and !trigger));
  GF (responded);
}
