module ColorSortLTL3_689_ColorSort_fixed_unrealizable
env boolean color_0;
env boolean color_1;
env boolean color_2;
assumption
	alw (!(color_0 & color_1 & !color_2));
assumption
	alw (!(color_0 & color_1 & color_2));
env boolean detect_0;
env boolean detect_1;
env boolean detect_2;
assumption
	alw (!(detect_0 & detect_1 & !detect_2));
assumption
	alw (!(detect_0 & detect_1 & detect_2));
env boolean ack_ver_0;
env boolean ack_hor_0;
env boolean ack_bot_0;
env boolean speedButton_0;
sys boolean verMot_0;
sys boolean horMot_0;
sys boolean botMot_0;
sys boolean botMot_1;
guarantee
	alw (!(botMot_0 & botMot_1));
sys boolean motSpeed_0;
sys boolean motSpeed_1;
guarantee
	alw (!(motSpeed_0 & motSpeed_1));
sys boolean spec_state_seek_0;
sys boolean spec_state_seek_1;
sys boolean spec_state_return_0;
sys boolean spec_state_return_1;
guarantee
	alw (!(spec_state_return_0 & spec_state_return_1));
sys boolean spec_currentColor_0;
sys boolean spec_currentColor_1;
sys boolean spec_currentColor_2;
guarantee
	alw (!(spec_currentColor_0 & spec_currentColor_1 & !spec_currentColor_2));
guarantee
	alw (!(spec_currentColor_0 & spec_currentColor_1 & spec_currentColor_2));
sys boolean spec_dropping;
sys boolean spec_speedButtonValidPressed;
define
	allsleep := verMot_0 & horMot_0 & !botMot_0 & botMot_1;
define
	nonemove := ack_ver_0 & ack_hor_0 & ack_bot_0;
define
	onlybotmoves := ack_ver_0 & ack_hor_0 & !ack_bot_0;
guarantee
	alw (spec_prevBotMotReturn <-> PREV(botMot_0 & !botMot_1));
guarantee
	alw (spec_prevBotMotSeek <-> PREV(!botMot_0 & !botMot_1));
sys boolean spec_prevBotMotReturn;
sys boolean spec_prevBotMotSeek;
guarantee
	alw (!verMot_0 ->(!botMot_0 & botMot_1 & horMot_0));
guarantee
	alw (!horMot_0 ->(!botMot_0 & botMot_1 & verMot_0));
guarantee
	alw ((botMot_0 | !botMot_1) ->(verMot_0 & horMot_0));
guarantee
	alw (verMot_0 -> (spec_currentColor_0 <-> next(spec_currentColor_0)) & (spec_currentColor_1 <-> next(spec_currentColor_1)) & (spec_currentColor_2 <-> next(spec_currentColor_2)));
guarantee
	alw (spec_dropping <-> next(spec_dropping) <->(verMot_0 &(!(spec_prevBotMotReturn & ack_bot_0))));
guarantee
	alw ((!ack_ver_0 | !ack_hor_0) -> allsleep);
guarantee
	respondsTo((color_0 | !color_1 | !color_2),!horMot_0 & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2));
guarantee
	alwEv (!horMot_0);
guarantee
	alw ((!color_0 & color_1 & color_2 &(!spec_dropping)) -> allsleep);
guarantee
	alw (((color_0 | !color_1 | !color_2) &(!spec_dropping)) ->(!verMot_0 & (color_0 <-> next(spec_currentColor_0)) & (color_1 <-> next(spec_currentColor_1)) & (color_2 <-> next(spec_currentColor_2))));
guarantee
	alw ((nonemove & spec_dropping & PREV(!ack_ver_0)) -> !botMot_0 & !botMot_1);
guarantee
	!spec_state_seek_0 & !spec_state_seek_1;
guarantee
	alw ((!spec_state_seek_0 & !spec_state_seek_1 &((!(spec_prevBotMotSeek & !ack_bot_0)) |((spec_prevBotMotSeek & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2)) &(spec_prevBotMotSeek & !ack_bot_0))) & next(!spec_state_seek_0 & !spec_state_seek_1)) |(!spec_state_seek_0 & !spec_state_seek_1 &((!(spec_prevBotMotSeek & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2))) &((spec_dropping & ((detect_0 <-> !spec_currentColor_0) | (detect_1 <-> !spec_currentColor_1) | (detect_2 <-> !spec_currentColor_2))) -> !botMot_0 & !botMot_1) &(spec_prevBotMotSeek & !ack_bot_0)) & next(!spec_state_seek_0 & spec_state_seek_1)) |(!spec_state_seek_0 & !spec_state_seek_1 &((!(spec_prevBotMotSeek & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2))) &(!((spec_dropping & ((detect_0 <-> !spec_currentColor_0) | (detect_1 <-> !spec_currentColor_1) | (detect_2 <-> !spec_currentColor_2))) -> !botMot_0 & !botMot_1)) &(spec_prevBotMotSeek & !ack_bot_0)) & next(spec_state_seek_0 & spec_state_seek_1)) |(!spec_state_seek_0 & spec_state_seek_1 &(spec_prevBotMotSeek & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2)) & next(!spec_state_seek_0 & !spec_state_seek_1)) |(!spec_state_seek_0 & spec_state_seek_1 &((!(spec_prevBotMotSeek & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2))) &((spec_dropping & ((detect_0 <-> !spec_currentColor_0) | (detect_1 <-> !spec_currentColor_1) | (detect_2 <-> !spec_currentColor_2))) -> !botMot_0 & !botMot_1)) & next(!spec_state_seek_0 & spec_state_seek_1)) |(!spec_state_seek_0 & spec_state_seek_1 &((!(spec_prevBotMotSeek & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2))) &(!((spec_dropping & ((detect_0 <-> !spec_currentColor_0) | (detect_1 <-> !spec_currentColor_1) | (detect_2 <-> !spec_currentColor_2))) -> !botMot_0 & !botMot_1))) & next(spec_state_seek_0 & spec_state_seek_1)) |(spec_state_seek_0 & !spec_state_seek_1 & next(spec_state_seek_0 & !spec_state_seek_1)) |(spec_state_seek_0 & spec_state_seek_1 &(spec_prevBotMotSeek & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2)) & next(spec_state_seek_0 & !spec_state_seek_1)) |(spec_state_seek_0 & spec_state_seek_1 &(!(spec_prevBotMotSeek & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2))) & next(spec_state_seek_0 & spec_state_seek_1)));
guarantee
	alwEv (!spec_state_seek_0 & !spec_state_seek_1 | !spec_state_seek_0 & spec_state_seek_1 | spec_state_seek_0 & spec_state_seek_1);
guarantee
	alw ((spec_dropping & onlybotmoves & (detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1) & (detect_2 <-> spec_currentColor_2) & PREV(!botMot_0 & !botMot_1)) <-> !horMot_0);
guarantee
	alw ((nonemove & PREV(!ack_hor_0) & spec_dropping) -> botMot_0 & !botMot_1);
guarantee
	!spec_state_return_0 & !spec_state_return_1;
guarantee
	alw ((!spec_state_return_0 & !spec_state_return_1 &(((!(spec_prevBotMotReturn & !ack_bot_0)) &(!(spec_prevBotMotReturn & ack_bot_0))) |(spec_prevBotMotReturn & ack_bot_0)) & next(!spec_state_return_0 & !spec_state_return_1)) |(!spec_state_return_0 & !spec_state_return_1 &((spec_prevBotMotReturn & !ack_bot_0) &(!((spec_dropping & onlybotmoves) -> botMot_0 & !botMot_1)) &(!(spec_prevBotMotReturn & ack_bot_0))) & next(!spec_state_return_0 & spec_state_return_1)) |(!spec_state_return_0 & !spec_state_return_1 &((spec_prevBotMotReturn & !ack_bot_0) &((spec_dropping & onlybotmoves) -> botMot_0 & !botMot_1) &(!(spec_prevBotMotReturn & ack_bot_0))) & next(spec_state_return_0 & !spec_state_return_1)) |(!spec_state_return_0 & spec_state_return_1 & next(!spec_state_return_0 & spec_state_return_1)) |(spec_state_return_0 & !spec_state_return_1 &(spec_prevBotMotReturn & ack_bot_0) & next(!spec_state_return_0 & !spec_state_return_1)) |(spec_state_return_0 & !spec_state_return_1 &((!((spec_dropping & onlybotmoves) -> botMot_0 & !botMot_1)) &(!(spec_prevBotMotReturn & ack_bot_0))) & next(!spec_state_return_0 & spec_state_return_1)) |(spec_state_return_0 & !spec_state_return_1 &(((spec_dropping & onlybotmoves) -> botMot_0 & !botMot_1) &(!(spec_prevBotMotReturn & ack_bot_0))) & next(spec_state_return_0 & !spec_state_return_1)));
guarantee
	alwEv (!spec_state_return_0 & !spec_state_return_1 | spec_state_return_0 & !spec_state_return_1);
guarantee
	alw ((spec_prevBotMotReturn & ack_bot_0) -> allsleep);
guarantee
	!motSpeed_0 & !motSpeed_1 &(!spec_dropping);
guarantee
	alw ((!speedButton_0 & PREV(speedButton_0)) <-> spec_speedButtonValidPressed);
guarantee
	alw ((spec_speedButtonValidPressed & PREV(!motSpeed_0 & !motSpeed_1)) -> !motSpeed_0 & motSpeed_1);
guarantee
	alw ((spec_speedButtonValidPressed & PREV(!motSpeed_0 & motSpeed_1)) -> motSpeed_0 & !motSpeed_1);
guarantee
	alw ((spec_speedButtonValidPressed & PREV(motSpeed_0 & !motSpeed_1)) -> !motSpeed_0 & !motSpeed_1);
guarantee
	alw (((!spec_speedButtonValidPressed) & PREV(!motSpeed_0 & !motSpeed_1)) -> !motSpeed_0 & !motSpeed_1);
guarantee
	alw (((!spec_speedButtonValidPressed) & PREV(!motSpeed_0 & motSpeed_1)) -> !motSpeed_0 & motSpeed_1);
guarantee
	alw (((!spec_speedButtonValidPressed) & PREV(motSpeed_0 & !motSpeed_1)) -> motSpeed_0 & !motSpeed_1);
sys boolean spec_waiting_ack_ver_mot;
sys boolean spec_waiting_ack_hor_mot;
guarantee
	!spec_waiting_ack_ver_mot;
guarantee
	alw (((!spec_waiting_ack_ver_mot) & (verMot_0)) -> next(!spec_waiting_ack_ver_mot));
guarantee
	alw (((!spec_waiting_ack_ver_mot) & !verMot_0) -> next(spec_waiting_ack_ver_mot));
guarantee
	alw ((spec_waiting_ack_ver_mot & ack_ver_0) -> next(!spec_waiting_ack_ver_mot));
guarantee
	alw ((spec_waiting_ack_ver_mot & (!ack_ver_0)) -> next(spec_waiting_ack_ver_mot));
assumption
	alw ((!spec_waiting_ack_ver_mot) -> ack_ver_0);
assumption
	alw (!verMot_0 -> next(!ack_ver_0));
assumption
	respondsTo(spec_waiting_ack_ver_mot,ack_ver_0);
guarantee
	!spec_waiting_ack_hor_mot;
guarantee
	alw (((!spec_waiting_ack_hor_mot) & (horMot_0)) -> next(!spec_waiting_ack_hor_mot));
guarantee
	alw (((!spec_waiting_ack_hor_mot) & !horMot_0) -> next(spec_waiting_ack_hor_mot));
guarantee
	alw ((spec_waiting_ack_hor_mot & ack_hor_0) -> next(!spec_waiting_ack_hor_mot));
guarantee
	alw ((spec_waiting_ack_hor_mot & (!ack_hor_0)) -> next(spec_waiting_ack_hor_mot));
assumption
	alw ((!spec_waiting_ack_hor_mot) -> ack_hor_0);
assumption
	alw (!horMot_0 -> next(!ack_hor_0));
assumption
	respondsTo(spec_waiting_ack_hor_mot,ack_hor_0);
assumption
	respondsTo(!ack_bot_0,ack_bot_0);
assumption
	alwEv ((color_0 | !color_1 | !color_2));
pattern respondsTo(trigger, response) {
var boolean responded;
responded;
alw (next(responded) iff (response or responded and !trigger));
alwEv (responded);
}