module HumanoidLTL_741_Humanoid_unrealizable
env boolean Obstacle_0;
env boolean Noise_0;
env boolean Heading_0;
env boolean Button_0;
sys boolean LeftMotor_0;
sys boolean LeftMotor_1;
sys boolean LeftMotor_2;
guarantee
	alw (!(LeftMotor_0 & LeftMotor_1 & LeftMotor_2));
sys boolean RightMotor_0;
sys boolean RightMotor_1;
sys boolean RightMotor_2;
guarantee
	alw (!(RightMotor_0 & RightMotor_1 & RightMotor_2));
sys boolean HeadMotor_0;
sys boolean HeadMotor_1;
guarantee
	alw (!(HeadMotor_0 & HeadMotor_1));
sys boolean nextMoveMode_0;
sys boolean nextMoveMode_1;
sys boolean spec_state_0;
sys boolean spec_state_1;
sys boolean search_0;
sys boolean next_head_0;
guarantee
	!search_0 & !spec_state_0 & !spec_state_1;
guarantee
	G !next_head_0;
guarantee
	alwEv (!nextMoveMode_0 & !nextMoveMode_1 & !search_0);
guarantee
	alw ((!spec_state_0 & !spec_state_1 & !nextMoveMode_0 & !nextMoveMode_1 & next(!nextMoveMode_0 & nextMoveMode_1)) -> next(!spec_state_0 & spec_state_1));
guarantee
	alw ((!spec_state_0 & spec_state_1 & !nextMoveMode_0 & nextMoveMode_1 & next(!nextMoveMode_0 & !nextMoveMode_1)) -> next(spec_state_0 & !spec_state_1));
guarantee
	alw (!(spec_state_0 & !spec_state_1 & !nextMoveMode_0 & !nextMoveMode_1 & next(!nextMoveMode_0 & nextMoveMode_1)));
guarantee
	alw ((nextMoveMode_0 & !nextMoveMode_1 | nextMoveMode_0 & nextMoveMode_1) -> next(!spec_state_0 & !spec_state_1));
guarantee
	alw ((PREV(!search_0) & Noise_0 & ((Heading_0 <-> !next_head_0)) & (!Button_0)) -> search_0);
guarantee
	alw ((PREV(search_0) & (Heading_0 <-> next_head_0)) -> !search_0);
guarantee
	alw ((PREV(search_0) & ((Heading_0 <-> !next_head_0))) -> search_0);
guarantee
	alw ((next(Obstacle_0) &(!PREV(nextMoveMode_0 & nextMoveMode_1))) -> next(!!nextMoveMode_0 & !nextMoveMode_1));
guarantee
	alw ((!nextMoveMode_0 & nextMoveMode_1 & next(!nextMoveMode_0 & !nextMoveMode_1)) <-> next(!LeftMotor_0 & !LeftMotor_1 & !LeftMotor_2 & !RightMotor_0 & !RightMotor_1 & RightMotor_2));
guarantee
	alw ((!nextMoveMode_0 & !nextMoveMode_1 & next(!nextMoveMode_0 & nextMoveMode_1)) <-> next(!LeftMotor_0 & !LeftMotor_1 & LeftMotor_2 & !RightMotor_0 & !RightMotor_1 & !RightMotor_2));
guarantee
	alw (next(!nextMoveMode_0 & nextMoveMode_1) ->(!nextMoveMode_0 & !nextMoveMode_1 | !nextMoveMode_0 & nextMoveMode_1));
guarantee
	alw (nextMoveMode_0 & !nextMoveMode_1 -> next(!LeftMotor_0 & !LeftMotor_1 & !LeftMotor_2 & !RightMotor_0 & RightMotor_1 & RightMotor_2));
guarantee
	alw (nextMoveMode_0 & nextMoveMode_1 -> next(!LeftMotor_0 & !LeftMotor_1 & LeftMotor_2 & RightMotor_0 & !RightMotor_1 & !RightMotor_2));
guarantee
	alw (nextMoveMode_0 & !nextMoveMode_1 <-> next(nextMoveMode_0 & nextMoveMode_1));
guarantee
	alw ((!(nextMoveMode_0 & !nextMoveMode_1 | nextMoveMode_0 & nextMoveMode_1)) -> next(!(LeftMotor_0 & !LeftMotor_1 & !LeftMotor_2 | RightMotor_0 & !RightMotor_1 & !RightMotor_2 | !LeftMotor_0 & LeftMotor_1 & LeftMotor_2 | !RightMotor_0 & RightMotor_1 & RightMotor_2)));
guarantee
	alw ((!nextMoveMode_0 & !nextMoveMode_1 & next(nextMoveMode_0 & !nextMoveMode_1)) <-> next(LeftMotor_0 & !LeftMotor_1 & LeftMotor_2 & RightMotor_0 & !RightMotor_1 & RightMotor_2));
guarantee
	alw ((!nextMoveMode_0 & !nextMoveMode_1 & PREV(nextMoveMode_0 & nextMoveMode_1)) <-> next(LeftMotor_0 & LeftMotor_1 & !LeftMotor_2 & RightMotor_0 & RightMotor_1 & !RightMotor_2));
guarantee
	alw (!nextMoveMode_0 & nextMoveMode_1 -> next((!nextMoveMode_0 | nextMoveMode_1)));
assumption
	respondsTo(search_0,(Heading_0 <-> next_head_0));
assumption
	alw (((!nextMoveMode_0 & !nextMoveMode_1 | !nextMoveMode_0 & nextMoveMode_1) & ((Heading_0 <-> !next_head_0))) -> ((next_head_0 <-> next(!Heading_0))));
assumption
	alw ((!nextMoveMode_0 & !nextMoveMode_1 & Obstacle_0) -> next(Obstacle_0));
assumption
	alw ((!nextMoveMode_0 & nextMoveMode_1 & !Obstacle_0) -> next((!Obstacle_0)));
assumption
	respondsTo(nextMoveMode_0 & nextMoveMode_1,nextMoveMode_0 & nextMoveMode_1 & !Obstacle_0);
pattern respondsTo(trigger, response) {
var boolean responded;
responded;
alw (next(responded) iff (response or responded and !trigger));
alwEv (responded);
}