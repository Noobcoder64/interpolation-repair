
module ColorSortLTL3_638_ColorSort_fixed

env boolean color_0;
env boolean color_1;
env boolean color_2;
env boolean detect_0;
env boolean detect_1;
env boolean detect_2;
env boolean ack_ver_0;
env boolean ack_hor_0;
env boolean ack_bot_0;
env boolean speedButton_0;

sys boolean verMot_0;
sys boolean horMot_0;
sys boolean botMot_0;
sys boolean botMot_1;
sys boolean motSpeed_0;
sys boolean motSpeed_1;
sys boolean spec_currentColor_0;
sys boolean spec_currentColor_1;
sys boolean spec_currentColor_2;
sys boolean spec_state_1_0;
sys boolean spec_state_1_1;
sys boolean spec_state_2_0;
sys boolean spec_state_2_1;
sys boolean spec_speedButtonValidPressed;

env boolean sYS_CONSTRAINT_0_respondsTo_responded;
env boolean eNV_CONSTRAINT_1_respondsTo_responded;
env boolean eNV_CONSTRAINT_2_respondsTo_responded;
env boolean eNV_CONSTRAINT_3_respondsTo_responded;
env boolean pREV_aux_4;
env boolean pREV_aux_5;
env boolean pREV_aux_6;
env boolean pREV_aux_7;

assumption
	alwEv (((color_0 | !(color_1)) | !(color_2)));
assumption
	alwEv (eNV_CONSTRAINT_1_respondsTo_responded);
assumption
	alwEv (eNV_CONSTRAINT_2_respondsTo_responded);
assumption
	alwEv (eNV_CONSTRAINT_3_respondsTo_responded);
assumption
	 (!(((color_0 & color_1) & !(color_2))));
assumption
	alw (!(((next(color_0) & next(color_1)) & !(next(color_2)))));
assumption
	 (!(((color_0 & color_1) & color_2)));
assumption
	alw (!(((next(color_0) & next(color_1)) & next(color_2))));
assumption
	 (!(((detect_0 & detect_1) & !(detect_2))));
assumption
	alw (!(((next(detect_0) & next(detect_1)) & !(next(detect_2)))));
assumption
	 (!(((detect_0 & detect_1) & detect_2)));
assumption
	alw (!(((next(detect_0) & next(detect_1)) & next(detect_2))));

guarantee
	 ((!(motSpeed_0) & !(motSpeed_1)));
guarantee
	alwEv (!(horMot_0));
guarantee
	alw ((verMot_0 -> (((spec_currentColor_0 <-> next(spec_currentColor_0)) & (spec_currentColor_1 <-> next(spec_currentColor_1))) & (spec_currentColor_2 <-> next(spec_currentColor_2)))));
guarantee
	alwEv (sYS_CONSTRAINT_0_respondsTo_responded);
guarantee
	 (!((botMot_0 & botMot_1)));
guarantee
	alw (!((next(botMot_0) & next(botMot_1))));
guarantee
	 (!((motSpeed_0 & motSpeed_1)));
guarantee
	alw (!((next(motSpeed_0) & next(motSpeed_1))));
guarantee
	 (!(((spec_currentColor_0 & spec_currentColor_1) & !(spec_currentColor_2))));
guarantee
	alw (!(((next(spec_currentColor_0) & next(spec_currentColor_1)) & !(next(spec_currentColor_2)))));
guarantee
	 (!(((spec_currentColor_0 & spec_currentColor_1) & spec_currentColor_2)));
guarantee
	alw (!(((next(spec_currentColor_0) & next(spec_currentColor_1)) & next(spec_currentColor_2))));
guarantee
	 (!((spec_state_1_0 & spec_state_1_1)));
guarantee
	alw (!((next(spec_state_1_0) & next(spec_state_1_1))));
guarantee
	 (!((spec_state_2_0 & spec_state_2_1)));
guarantee
	alw (!((next(spec_state_2_0) & next(spec_state_2_1))));
guarantee
	 ((!(verMot_0) -> ((!(botMot_0) & botMot_1) & horMot_0)));
guarantee
	alw ((!(next(verMot_0)) -> ((!(next(botMot_0)) & next(botMot_1)) & next(horMot_0))));
guarantee
	 ((!(horMot_0) -> ((!(botMot_0) & botMot_1) & verMot_0)));
guarantee
	alw ((!(next(horMot_0)) -> ((!(next(botMot_0)) & next(botMot_1)) & next(verMot_0))));
guarantee
	 (((botMot_0 | !(botMot_1)) -> (verMot_0 & horMot_0)));
guarantee
	alw (((next(botMot_0) | !(next(botMot_1))) -> (next(verMot_0) & next(horMot_0))));
guarantee
	 ((((((!(color_0) & color_1) & color_2) & ((ack_ver_0 & ack_hor_0) & ack_bot_0)) & (((verMot_0 & horMot_0) & !(botMot_0)) & botMot_1)) -> (((verMot_0 & horMot_0) & !(botMot_0)) & botMot_1)));
guarantee
	alw ((((((!(next(color_0)) & next(color_1)) & next(color_2)) & ((next(ack_ver_0) & next(ack_hor_0)) & next(ack_bot_0))) & (((next(verMot_0) & next(horMot_0)) & !(next(botMot_0))) & next(botMot_1))) -> (((next(verMot_0) & next(horMot_0)) & !(next(botMot_0))) & next(botMot_1))));
guarantee
	 (((!(speedButton_0) & pREV_aux_4) <-> spec_speedButtonValidPressed));
guarantee
	alw (((!(next(speedButton_0)) & next(pREV_aux_4)) <-> next(spec_speedButtonValidPressed)));
guarantee
	 (((spec_speedButtonValidPressed & pREV_aux_5) -> (!(motSpeed_0) & motSpeed_1)));
guarantee
	alw (((next(spec_speedButtonValidPressed) & next(pREV_aux_5)) -> (!(next(motSpeed_0)) & next(motSpeed_1))));
guarantee
	 (((spec_speedButtonValidPressed & pREV_aux_6) -> (motSpeed_0 & !(motSpeed_1))));
guarantee
	alw (((next(spec_speedButtonValidPressed) & next(pREV_aux_6)) -> (next(motSpeed_0) & !(next(motSpeed_1)))));
guarantee
	 (((spec_speedButtonValidPressed & pREV_aux_7) -> (!(motSpeed_0) & !(motSpeed_1))));
guarantee
	alw (((next(spec_speedButtonValidPressed) & next(pREV_aux_7)) -> (!(next(motSpeed_0)) & !(next(motSpeed_1)))));
guarantee
	 (((!(spec_speedButtonValidPressed) & pREV_aux_5) -> (!(motSpeed_0) & !(motSpeed_1))));
guarantee
	alw (((!(next(spec_speedButtonValidPressed)) & next(pREV_aux_5)) -> (!(next(motSpeed_0)) & !(next(motSpeed_1)))));
guarantee
	 (((!(spec_speedButtonValidPressed) & pREV_aux_6) -> (!(motSpeed_0) & motSpeed_1)));
guarantee
	alw (((!(next(spec_speedButtonValidPressed)) & next(pREV_aux_6)) -> (!(next(motSpeed_0)) & next(motSpeed_1))));
guarantee
	 (((!(spec_speedButtonValidPressed) & pREV_aux_7) -> (motSpeed_0 & !(motSpeed_1))));
guarantee
	alw (((!(next(spec_speedButtonValidPressed)) & next(pREV_aux_7)) -> (next(motSpeed_0) & !(next(motSpeed_1)))));

assumption
	 (sYS_CONSTRAINT_0_respondsTo_responded);
assumption
	alw ((next(sYS_CONSTRAINT_0_respondsTo_responded) <-> (((((detect_0 <-> spec_currentColor_0) & (detect_1 <-> spec_currentColor_1)) & (detect_2 <-> spec_currentColor_2)) & !(horMot_0)) | (sYS_CONSTRAINT_0_respondsTo_responded & !(((color_0 | !(color_1)) | !(color_2)))))));
assumption
	 (eNV_CONSTRAINT_1_respondsTo_responded);
assumption
	alw ((next(eNV_CONSTRAINT_1_respondsTo_responded) <-> (ack_ver_0 | (eNV_CONSTRAINT_1_respondsTo_responded & !(!(ack_ver_0))))));
assumption
	 (eNV_CONSTRAINT_2_respondsTo_responded);
assumption
	alw ((next(eNV_CONSTRAINT_2_respondsTo_responded) <-> (ack_hor_0 | (eNV_CONSTRAINT_2_respondsTo_responded & !(!(ack_hor_0))))));
assumption
	 (eNV_CONSTRAINT_3_respondsTo_responded);
assumption
	alw ((next(eNV_CONSTRAINT_3_respondsTo_responded) <-> (ack_bot_0 | (eNV_CONSTRAINT_3_respondsTo_responded & !(!(ack_bot_0))))));
assumption
	 (!(pREV_aux_4));
assumption
	alw ((next(pREV_aux_4) <-> speedButton_0));
assumption
	 (!(pREV_aux_5));
assumption
	alw ((next(pREV_aux_5) <-> (!(motSpeed_0) & !(motSpeed_1))));
assumption
	 (!(pREV_aux_6));
assumption
	alw ((next(pREV_aux_6) <-> (!(motSpeed_0) & motSpeed_1)));
assumption
	 (!(pREV_aux_7));
assumption
	alw ((next(pREV_aux_7) <-> (motSpeed_0 & !(motSpeed_1))));

