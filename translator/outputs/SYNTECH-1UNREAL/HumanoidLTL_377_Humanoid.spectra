
module HumanoidLTL_377_Humanoid

env boolean obstacle_0;
env boolean inputMoveMode_0;
env boolean inputMoveMode_1;

sys boolean leftMotor_0;
sys boolean leftMotor_1;
sys boolean rightMotor_0;
sys boolean rightMotor_1;
sys boolean headMotor_0;
sys boolean headMotor_1;
sys boolean outputMoveMode_0;
sys boolean outputMoveMode_1;

env boolean eNV_CONSTRAINT_0_respondsTo_responded;

assumption
	alwEv (eNV_CONSTRAINT_0_respondsTo_responded);
assumption
	 (!((inputMoveMode_0 & inputMoveMode_1)));
assumption
	alw (!((next(inputMoveMode_0) & next(inputMoveMode_1))));

guarantee
	 (!((leftMotor_0 & leftMotor_1)));
guarantee
	alw (!((next(leftMotor_0) & next(leftMotor_1))));
guarantee
	 (!((rightMotor_0 & rightMotor_1)));
guarantee
	alw (!((next(rightMotor_0) & next(rightMotor_1))));
guarantee
	 (!((headMotor_0 & headMotor_1)));
guarantee
	alw (!((next(headMotor_0) & next(headMotor_1))));
guarantee
	 (!((outputMoveMode_0 & outputMoveMode_1)));
guarantee
	alw (!((next(outputMoveMode_0) & next(outputMoveMode_1))));
guarantee
	 ((((!(inputMoveMode_0) & !(inputMoveMode_1)) & obstacle_0) -> (((((outputMoveMode_0 & !(outputMoveMode_1)) & !(leftMotor_0)) & leftMotor_1) & !(rightMotor_0)) & !(rightMotor_1))));
guarantee
	alw ((((!(next(inputMoveMode_0)) & !(next(inputMoveMode_1))) & next(obstacle_0)) -> (((((next(outputMoveMode_0) & !(next(outputMoveMode_1))) & !(next(leftMotor_0))) & next(leftMotor_1)) & !(next(rightMotor_0))) & !(next(rightMotor_1)))));
guarantee
	 ((((inputMoveMode_0 & !(inputMoveMode_1)) & !(obstacle_0)) -> (((((!(outputMoveMode_0) & !(outputMoveMode_1)) & !(leftMotor_0)) & !(leftMotor_1)) & !(rightMotor_0)) & rightMotor_1)));
guarantee
	alw ((((next(inputMoveMode_0) & !(next(inputMoveMode_1))) & !(next(obstacle_0))) -> (((((!(next(outputMoveMode_0)) & !(next(outputMoveMode_1))) & !(next(leftMotor_0))) & !(next(leftMotor_1))) & !(next(rightMotor_0))) & next(rightMotor_1))));
guarantee
	 ((((!(inputMoveMode_0) & !(inputMoveMode_1)) & !(obstacle_0)) -> (((!(leftMotor_0) & !(leftMotor_1)) & !(rightMotor_0)) & !(rightMotor_1))));
guarantee
	alw ((((!(next(inputMoveMode_0)) & !(next(inputMoveMode_1))) & !(next(obstacle_0))) -> (((!(next(leftMotor_0)) & !(next(leftMotor_1))) & !(next(rightMotor_0))) & !(next(rightMotor_1)))));
guarantee
	 ((obstacle_0 -> (outputMoveMode_0 & !(outputMoveMode_1))));
guarantee
	alw ((next(obstacle_0) -> (next(outputMoveMode_0) & !(next(outputMoveMode_1)))));

assumption
	 (eNV_CONSTRAINT_0_respondsTo_responded);
assumption
	alw ((next(eNV_CONSTRAINT_0_respondsTo_responded) <-> (!(obstacle_0) | (eNV_CONSTRAINT_0_respondsTo_responded & !((outputMoveMode_0 & !(outputMoveMode_1)))))));

