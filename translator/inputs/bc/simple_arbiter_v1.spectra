module Simple_arbiter_v1

env boolean r_0;

env boolean r_1;

sys boolean g_0;

sys boolean g_1;

guarantee
	G((!(g_0)) | (!(g_1)));

guarantee
	G(((r_0) & (next(r_1))) -> (next((g_0) & (g_1))));

guarantee
	S_responds_to_P_globally(g_0, r_0);
	
guarantee
	S_responds_to_P_globally(g_1, r_1);
	
pattern S_responds_to_P_globally(s, p) {
  var { S0, S1 } state;
  
  // initial assignments: initial state
  ini state=S0;
  
  // safety this and next state
  alw ((state=S0 & ((!p) | (p & s)) & next(state=S0)) |
  (state=S0 & (p & !s) & next(state=S1)) |
  (state=S1 & (s) & next(state=S0)) |
  (state=S1 & (!s) & next(state=S1)));

  // equivalence of satisfaction
  alwEv (state=S0);
}





