module Arbiter

env boolean a;

env boolean r1;

env boolean r2;

sys boolean g1;

sys boolean g2;


guarantee
	S_responds_to_P_globally(g1, r1);

guarantee
	S_responds_to_P_globally(g2, r2);
	
guarantee
	G (!a -> (!g1 & !g2));

pattern S_responds_to_P_globally(s, p) {
  var { S0, S1 } state;
  
  // initial assignments: initial state
  ini state=S0;
  
  // safety this and next state
  alw ((state=S0 & ((!p) | (p & s)) & next(state=S0)) |
  (state=S0 & (p & !s) & next(state=S1)) |
  (state=S1 & (s) & next(state=S0)) |
  (state=S1 & (!s) & next(state=S1)));

  // equivalence of satisfaction
  alwEv (state=S0);
}