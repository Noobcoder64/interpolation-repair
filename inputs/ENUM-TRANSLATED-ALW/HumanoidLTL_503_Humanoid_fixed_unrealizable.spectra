
module HumanoidLTL_503_Humanoid_fixed_unrealizable

env {CLEAR, BLOCKED} obstacle;
env {FWD, BWD, TURN_LEFT_1, TURN_LEFT_2, DANCE} inputMoveMode;
env {FREE, PRESSED} button;
env {QUIET, NOISE} noise;

sys {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN, CALIB_FWD, DANCE} leftMotor;
sys {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN, CALIB_FWD, DANCE} rightMotor;
sys {FWD, BWD, STOP, DANCE} headMotor;
sys {FWD, BWD, TURN_LEFT_1, TURN_LEFT_2, DANCE} spec_OutputMoveMode;

aux boolean pREV_aux_0;
aux boolean pREV_aux_1;

assumption
	alw ((((inputMoveMode = FWD) & pREV_aux_0) -> (obstacle = CLEAR)));

guarantee
	alw ((((inputMoveMode = FWD) & (obstacle = BLOCKED)) -> (((spec_OutputMoveMode = TURN_LEFT_1) & (leftMotor = CALIB_TURN)) & (rightMotor = CALIB_TURN))));
guarantee
	alw ((((inputMoveMode = BWD) & (obstacle = CLEAR)) -> (((spec_OutputMoveMode = FWD) & (leftMotor = FWD)) & (rightMotor = BWD))));
guarantee
	alw (((((inputMoveMode = FWD) & (button = FREE)) & pREV_aux_0) -> ((leftMotor = CALIB_FWD) & (rightMotor = CALIB_FWD))));
guarantee
	alw ((((((inputMoveMode = FWD) & (obstacle = CLEAR)) & (button = FREE)) & pREV_aux_1) -> ((leftMotor = FWD) & (rightMotor = FWD))));
guarantee
	alw (((obstacle = BLOCKED) -> !((spec_OutputMoveMode = FWD))));
guarantee
	alw (((inputMoveMode = TURN_LEFT_1) <-> (spec_OutputMoveMode = TURN_LEFT_2)));
guarantee
	alw (((inputMoveMode = TURN_LEFT_1) -> ((leftMotor = FWD) & (rightMotor = TURN_FWD))));
guarantee
	alw (((inputMoveMode = TURN_LEFT_2) -> ((leftMotor = BWD) & (rightMotor = TURN_BWD))));
guarantee
	alw ((!(((inputMoveMode = TURN_LEFT_1) | (inputMoveMode = TURN_LEFT_2))) -> !((((leftMotor = TURN_BWD) | (rightMotor = TURN_BWD)) | ((leftMotor = TURN_FWD) & (rightMotor = TURN_FWD))))));
guarantee
	alw ((((inputMoveMode = TURN_LEFT_1) | (inputMoveMode = TURN_LEFT_2)) -> (headMotor = STOP)));
guarantee
	alw ((((inputMoveMode = TURN_LEFT_2) & (obstacle = CLEAR)) -> (spec_OutputMoveMode = FWD)));
guarantee
	alw ((((inputMoveMode = DANCE) & (spec_OutputMoveMode = DANCE)) -> ((((rightMotor = STOP) & (leftMotor = DANCE)) & (headMotor = DANCE)) | (((rightMotor = STOP) & (leftMotor = STOP)) & (headMotor = STOP)))));
guarantee
	alwEv ((leftMotor = DANCE));
guarantee
	alw (((button = FREE) -> ((spec_OutputMoveMode = inputMoveMode) | !((inputMoveMode = DANCE)))));
guarantee
	alw (((((button = PRESSED) & (inputMoveMode = FWD)) & (obstacle = CLEAR)) -> (((spec_OutputMoveMode = DANCE) & (leftMotor = CALIB_TURN)) & (rightMotor = CALIB_TURN))));
guarantee
	alw (((((button = PRESSED) & (inputMoveMode = DANCE)) & (obstacle = CLEAR)) -> (((spec_OutputMoveMode = FWD) & (leftMotor = CALIB_FWD)) & (rightMotor = CALIB_FWD))));
guarantee
	alw ((!(((button = PRESSED) | (inputMoveMode = DANCE))) -> !((spec_OutputMoveMode = DANCE))));

guarantee
	 (!(pREV_aux_0));
guarantee
	alw ((next(pREV_aux_0) <-> (inputMoveMode = TURN_LEFT_2)));
guarantee
	 (!(pREV_aux_1));
guarantee
	alw ((next(pREV_aux_1) <-> !((inputMoveMode = TURN_LEFT_2))));

