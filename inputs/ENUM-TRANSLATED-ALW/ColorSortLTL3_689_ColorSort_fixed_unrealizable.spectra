
module ColorSortLTL3_689_ColorSort_fixed_unrealizable

env {RED, GREEN, BLUE, BLACK, YELLOW, WHITE} color;
env {RED, GREEN, BLUE, BLACK, YELLOW, WHITE} detect;
env {MOVE, SLEEP} ack_ver;
env {MOVE, SLEEP} ack_hor;
env {MOVE, SLEEP} ack_bot;
env {PRESS, RELEASE} speedButton;

sys {MOVE, SLEEP} verMot;
sys {MOVE, SLEEP} horMot;
sys {SEEK, STOP, RETURN} botMot;
sys {LEVEL1, LEVEL2, LEVEL3} motSpeed;
sys {S0, S1, S2, S3} spec_state_seek;
sys {S0, S1, S2} spec_state_return;
sys {RED, GREEN, BLUE, BLACK, YELLOW, WHITE} spec_currentColor;
sys boolean spec_dropping;
sys boolean spec_speedButtonValidPressed;
sys boolean spec_prevBotMotReturn;
sys boolean spec_prevBotMotSeek;
sys boolean spec_waiting_ack_ver_mot;
sys boolean spec_waiting_ack_hor_mot;

aux boolean sYS_CONSTRAINT_0_respondsTo_responded;
aux boolean eNV_CONSTRAINT_1_respondsTo_responded;
aux boolean eNV_CONSTRAINT_2_respondsTo_responded;
aux boolean eNV_CONSTRAINT_3_respondsTo_responded;
aux boolean pREV_aux_4;
aux boolean pREV_aux_5;
aux boolean pREV_aux_6;
aux boolean pREV_aux_7;
aux boolean pREV_aux_8;
aux boolean pREV_aux_9;
aux boolean pREV_aux_10;
aux boolean pREV_aux_11;

assumption
	alw ((!(spec_waiting_ack_ver_mot) -> (ack_ver = SLEEP)));
assumption
	alw (((verMot = MOVE) -> (next(ack_ver = MOVE))));
assumption
	alw ((!(spec_waiting_ack_hor_mot) -> (ack_hor = SLEEP)));
assumption
	alw (((horMot = MOVE) -> (next(ack_hor = MOVE))));
assumption
	alwEv (!((color = BLACK)));
assumption
	alwEv (eNV_CONSTRAINT_1_respondsTo_responded);
assumption
	alwEv (eNV_CONSTRAINT_2_respondsTo_responded);
assumption
	alwEv (eNV_CONSTRAINT_3_respondsTo_responded);

guarantee
	alw ((spec_prevBotMotReturn <-> pREV_aux_4));
guarantee
	alw ((spec_prevBotMotSeek <-> pREV_aux_5));
guarantee
	alw (((verMot = MOVE) -> ((botMot = STOP) & (horMot = SLEEP))));
guarantee
	alw (((horMot = MOVE) -> ((botMot = STOP) & (verMot = SLEEP))));
guarantee
	alw ((!((botMot = STOP)) -> ((verMot = SLEEP) & (horMot = SLEEP))));
guarantee
	alw (((verMot = SLEEP) -> (spec_currentColor = next(spec_currentColor))));
guarantee
	alw (((spec_dropping = next(spec_dropping)) <-> ((verMot = SLEEP) & !((spec_prevBotMotReturn & (ack_bot = SLEEP))))));
guarantee
	alw ((((ack_ver = MOVE) | (ack_hor = MOVE)) -> (((verMot = SLEEP) & (horMot = SLEEP)) & (botMot = STOP))));
guarantee
	alwEv ((horMot = MOVE));
guarantee
	alw ((((color = BLACK) & !(spec_dropping)) -> (((verMot = SLEEP) & (horMot = SLEEP)) & (botMot = STOP))));
guarantee
	alw (((!((color = BLACK)) & !(spec_dropping)) -> ((verMot = MOVE) & (next(spec_currentColor = color)))));
guarantee
	alw (((((((ack_ver = SLEEP) & (ack_hor = SLEEP)) & (ack_bot = SLEEP)) & spec_dropping) & pREV_aux_6) -> (botMot = SEEK)));
guarantee
	 ((spec_state_seek = S0));
guarantee
	alw ((((((((((((spec_state_seek = S0) & (!((spec_prevBotMotSeek & (ack_bot = MOVE))) | ((spec_prevBotMotSeek & (detect = spec_currentColor)) & (spec_prevBotMotSeek & (ack_bot = MOVE))))) & (next(spec_state_seek = S0))) | (((spec_state_seek = S0) & ((!((spec_prevBotMotSeek & (detect = spec_currentColor))) & ((spec_dropping & !((detect = spec_currentColor))) -> (botMot = SEEK))) & (spec_prevBotMotSeek & (ack_bot = MOVE)))) & (next(spec_state_seek = S1)))) | (((spec_state_seek = S0) & ((!((spec_prevBotMotSeek & (detect = spec_currentColor))) & !(((spec_dropping & !((detect = spec_currentColor))) -> (botMot = SEEK)))) & (spec_prevBotMotSeek & (ack_bot = MOVE)))) & (next(spec_state_seek = S3)))) | (((spec_state_seek = S1) & (spec_prevBotMotSeek & (detect = spec_currentColor))) & (next(spec_state_seek = S0)))) | (((spec_state_seek = S1) & (!((spec_prevBotMotSeek & (detect = spec_currentColor))) & ((spec_dropping & !((detect = spec_currentColor))) -> (botMot = SEEK)))) & (next(spec_state_seek = S1)))) | (((spec_state_seek = S1) & (!((spec_prevBotMotSeek & (detect = spec_currentColor))) & !(((spec_dropping & !((detect = spec_currentColor))) -> (botMot = SEEK))))) & (next(spec_state_seek = S3)))) | ((spec_state_seek = S2) & (next(spec_state_seek = S2)))) | (((spec_state_seek = S3) & (spec_prevBotMotSeek & (detect = spec_currentColor))) & (next(spec_state_seek = S2)))) | (((spec_state_seek = S3) & !((spec_prevBotMotSeek & (detect = spec_currentColor)))) & (next(spec_state_seek = S3)))));
guarantee
	alwEv ((((spec_state_seek = S0) | (spec_state_seek = S1)) | (spec_state_seek = S3)));
guarantee
	alw (((((spec_dropping & (((ack_ver = SLEEP) & (ack_hor = SLEEP)) & (ack_bot = MOVE))) & (detect = spec_currentColor)) & pREV_aux_5) <-> (horMot = MOVE)));
guarantee
	alw (((((((ack_ver = SLEEP) & (ack_hor = SLEEP)) & (ack_bot = SLEEP)) & pREV_aux_7) & spec_dropping) -> (botMot = RETURN)));
guarantee
	 ((spec_state_return = S0));
guarantee
	alw ((((((((((spec_state_return = S0) & ((!((spec_prevBotMotReturn & (ack_bot = MOVE))) & !((spec_prevBotMotReturn & (ack_bot = SLEEP)))) | (spec_prevBotMotReturn & (ack_bot = SLEEP)))) & (next(spec_state_return = S0))) | (((spec_state_return = S0) & (((spec_prevBotMotReturn & (ack_bot = MOVE)) & !(((spec_dropping & (((ack_ver = SLEEP) & (ack_hor = SLEEP)) & (ack_bot = MOVE))) -> (botMot = RETURN)))) & !((spec_prevBotMotReturn & (ack_bot = SLEEP))))) & (next(spec_state_return = S1)))) | (((spec_state_return = S0) & (((spec_prevBotMotReturn & (ack_bot = MOVE)) & ((spec_dropping & (((ack_ver = SLEEP) & (ack_hor = SLEEP)) & (ack_bot = MOVE))) -> (botMot = RETURN))) & !((spec_prevBotMotReturn & (ack_bot = SLEEP))))) & (next(spec_state_return = S2)))) | ((spec_state_return = S1) & (next(spec_state_return = S1)))) | (((spec_state_return = S2) & (spec_prevBotMotReturn & (ack_bot = SLEEP))) & (next(spec_state_return = S0)))) | (((spec_state_return = S2) & (!(((spec_dropping & (((ack_ver = SLEEP) & (ack_hor = SLEEP)) & (ack_bot = MOVE))) -> (botMot = RETURN))) & !((spec_prevBotMotReturn & (ack_bot = SLEEP))))) & (next(spec_state_return = S1)))) | (((spec_state_return = S2) & (((spec_dropping & (((ack_ver = SLEEP) & (ack_hor = SLEEP)) & (ack_bot = MOVE))) -> (botMot = RETURN)) & !((spec_prevBotMotReturn & (ack_bot = SLEEP))))) & (next(spec_state_return = S2)))));
guarantee
	alwEv (((spec_state_return = S0) | (spec_state_return = S2)));
guarantee
	alw (((spec_prevBotMotReturn & (ack_bot = SLEEP)) -> (((verMot = SLEEP) & (horMot = SLEEP)) & (botMot = STOP))));
guarantee
	 (((motSpeed = LEVEL1) & !(spec_dropping)));
guarantee
	alw ((((speedButton = PRESS) & pREV_aux_8) <-> spec_speedButtonValidPressed));
guarantee
	alw (((spec_speedButtonValidPressed & pREV_aux_9) -> (motSpeed = LEVEL2)));
guarantee
	alw (((spec_speedButtonValidPressed & pREV_aux_10) -> (motSpeed = LEVEL3)));
guarantee
	alw (((spec_speedButtonValidPressed & pREV_aux_11) -> (motSpeed = LEVEL1)));
guarantee
	alw (((!(spec_speedButtonValidPressed) & pREV_aux_9) -> (motSpeed = LEVEL1)));
guarantee
	alw (((!(spec_speedButtonValidPressed) & pREV_aux_10) -> (motSpeed = LEVEL2)));
guarantee
	alw (((!(spec_speedButtonValidPressed) & pREV_aux_11) -> (motSpeed = LEVEL3)));
guarantee
	 (!(spec_waiting_ack_ver_mot));
guarantee
	alw (((!(spec_waiting_ack_ver_mot) & !((verMot = MOVE))) -> !(next(spec_waiting_ack_ver_mot))));
guarantee
	alw (((!(spec_waiting_ack_ver_mot) & (verMot = MOVE)) -> next(spec_waiting_ack_ver_mot)));
guarantee
	alw (((spec_waiting_ack_ver_mot & (ack_ver = SLEEP)) -> !(next(spec_waiting_ack_ver_mot))));
guarantee
	alw (((spec_waiting_ack_ver_mot & !((ack_ver = SLEEP))) -> next(spec_waiting_ack_ver_mot)));
guarantee
	 (!(spec_waiting_ack_hor_mot));
guarantee
	alw (((!(spec_waiting_ack_hor_mot) & !((horMot = MOVE))) -> !(next(spec_waiting_ack_hor_mot))));
guarantee
	alw (((!(spec_waiting_ack_hor_mot) & (horMot = MOVE)) -> next(spec_waiting_ack_hor_mot)));
guarantee
	alw (((spec_waiting_ack_hor_mot & (ack_hor = SLEEP)) -> !(next(spec_waiting_ack_hor_mot))));
guarantee
	alw (((spec_waiting_ack_hor_mot & !((ack_hor = SLEEP))) -> next(spec_waiting_ack_hor_mot)));
guarantee
	alwEv (sYS_CONSTRAINT_0_respondsTo_responded);

guarantee
	 (sYS_CONSTRAINT_0_respondsTo_responded);
guarantee
	alw ((next(sYS_CONSTRAINT_0_respondsTo_responded) <-> (((horMot = MOVE) & (detect = spec_currentColor)) | (sYS_CONSTRAINT_0_respondsTo_responded & !(!((color = BLACK)))))));
guarantee
	 (eNV_CONSTRAINT_1_respondsTo_responded);
guarantee
	alw ((next(eNV_CONSTRAINT_1_respondsTo_responded) <-> ((ack_ver = SLEEP) | (eNV_CONSTRAINT_1_respondsTo_responded & !(spec_waiting_ack_ver_mot)))));
guarantee
	 (eNV_CONSTRAINT_2_respondsTo_responded);
guarantee
	alw ((next(eNV_CONSTRAINT_2_respondsTo_responded) <-> ((ack_hor = SLEEP) | (eNV_CONSTRAINT_2_respondsTo_responded & !(spec_waiting_ack_hor_mot)))));
guarantee
	 (eNV_CONSTRAINT_3_respondsTo_responded);
guarantee
	alw ((next(eNV_CONSTRAINT_3_respondsTo_responded) <-> ((ack_bot = SLEEP) | (eNV_CONSTRAINT_3_respondsTo_responded & !((ack_bot = MOVE))))));
guarantee
	 (!(pREV_aux_4));
guarantee
	alw ((next(pREV_aux_4) <-> (botMot = RETURN)));
guarantee
	 (!(pREV_aux_5));
guarantee
	alw ((next(pREV_aux_5) <-> (botMot = SEEK)));
guarantee
	 (!(pREV_aux_6));
guarantee
	alw ((next(pREV_aux_6) <-> (ack_ver = MOVE)));
guarantee
	 (!(pREV_aux_7));
guarantee
	alw ((next(pREV_aux_7) <-> (ack_hor = MOVE)));
guarantee
	 (!(pREV_aux_8));
guarantee
	alw ((next(pREV_aux_8) <-> (speedButton = RELEASE)));
guarantee
	 (!(pREV_aux_9));
guarantee
	alw ((next(pREV_aux_9) <-> (motSpeed = LEVEL1)));
guarantee
	 (!(pREV_aux_10));
guarantee
	alw ((next(pREV_aux_10) <-> (motSpeed = LEVEL2)));
guarantee
	 (!(pREV_aux_11));
guarantee
	alw ((next(pREV_aux_11) <-> (motSpeed = LEVEL3)));

