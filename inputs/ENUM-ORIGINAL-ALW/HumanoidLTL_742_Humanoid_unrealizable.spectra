module Humanoid
		env {CLEAR, BLOCKED} Obstacle ;
		sys {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN, CALIB_FWD} LeftMotor ;
		sys {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN, CALIB_FWD} RightMotor ;
		sys {FWD, BWD, STOP} HeadMotor ;
		sys {FWD, BWD, TURN_LEFT} nextMoveMode ;
		sys {Q0,Q1,Q2,Q3} specState ;
		sys {T0,T1,T2,T3} turnState ;
////////////////////////////////////////////////////////////////
/*
 * initial state
 */
 ////////////////////////////////////////////////////////////////
guarantee
	specState = Q0;
guarantee
	turnState = T0;






////////////////////////////////////////////////////////////////
/*
 * goals 
 */
 ////////////////////////////////////////////////////////////////
guarantee
  alwEv (nextMoveMode=FWD);
	
//LTLSPEC
	//G F (search = M0); // finally head to the right direction
////////////////////////////////////////////////////////////////







////////////////////////////////////////////////////////////////
/*
 * to prevant robot from going FWD<-->BWD indefinitely 
 */
 ////////////////////////////////////////////////////////////////
guarantee 
	//alw ((Y(specState = Q0) & Y(nextMoveMode = FWD) & nextMoveMode = BWD) -> specState = Q1);
	alw ((specState = Q0 & nextMoveMode = FWD & next(nextMoveMode = BWD)) -> next(specState = Q1));
	
guarantee 
	//alw (Y((specState = Q1) & Y(nextMoveMode = BWD) & nextMoveMode = FWD) -> specState = Q2);
	alw ((specState = Q1 & nextMoveMode = BWD & next(nextMoveMode = FWD)) -> next(specState = Q2));
	
guarantee
	//alw (!(Y(specState = Q2) & Y(nextMoveMode = FWD) & nextMoveMode = BWD));
	alw (!(specState = Q2 & nextMoveMode = FWD & next(nextMoveMode = BWD)));
	//check if needed
guarantee 
	alw ((specState = Q1 & next(nextMoveMode = BWD)) -> next(specState = Q1));
	
guarantee 
	alw ((specState = Q2 & next(nextMoveMode = FWD)) -> next(specState) = Q2);
	
guarantee
	alw (nextMoveMode = TURN_LEFT -> next(specState = Q0));
////////////////////////////////////////////////////////////////











////////////////////////////////////////////////////////////////
/*
 * automaton for searching direction
 */
 ////////////////////////////////////////////////////////////////
 /*LTLSPEC 
	alw ((Y(search = M0) & Noise = NOISE & Heading != next_head & Button != PRESSED) -> 
		(search = M1));

LTLSPEC
	alw ((Y(search = M1) & Heading = next_head) -> search = M0);
 
 LTLSPEC
 	alw ((Y(search = M1) & Heading != next_head) -> search = M1);*/
 ////////////////////////////////////////////////////////////////
 	
 	
 	
 	





////////////////////////////////////////////////////////////////
/*
 * determine heading
 */	
 ////////////////////////////////////////////////////////////////
/*LTLSPEC 
	alw ((Button = PRESSED & Y(search = M0)) -> (next(next_head) =  Heading));

LTLSPEC 
	alw ((Button = FREE | Y(search = M1)) -> (next(next_head) = next_head));*/
////////////////////////////////////////////////////////////////








////////////////////////////////////////////////////////////////
/*
 * 
 */
 ////////////////////////////////////////////////////////////////
guarantee
	alw ((Obstacle = BLOCKED) -> (!(nextMoveMode = FWD)));
	
	//alw ((next(Obstacle = BLOCKED) & !((Y(nextMoveMode = TURN_LEFT_2)))) -> next(!(nextMoveMode = FWD)));
	
guarantee
	alw (((nextMoveMode = BWD) & next(nextMoveMode = FWD)) <-> next(LeftMotor = FWD & RightMotor = BWD));

guarantee
	alw (((nextMoveMode = FWD) & next(nextMoveMode = BWD)) <-> next(LeftMotor = BWD & RightMotor = FWD));
	
guarantee //Going backward can only start from a calibrated FWD movement
	alw (next(nextMoveMode = BWD) -> ((nextMoveMode = FWD) | (nextMoveMode = BWD)));
	
guarantee //From going backward it is only possible to go backwards or forwards 
	alw (nextMoveMode = BWD -> next((nextMoveMode = FWD) | (nextMoveMode = BWD)));







 ////////////////////////////////////////////////////////////////
/*
 * 					TURNNING - AUTOMATON
 */
 ////////////////////////////////////////////////////////////////
guarantee
	alw (next(turnState) = T0 -> (turnState = T0 | turnState = T3));
	
guarantee
	alw ((turnState = T0 & !(nextMoveMode = TURN_LEFT)) -> next(turnState) = T0);
	
guarantee
	alw ((nextMoveMode = TURN_LEFT & Y(nextMoveMode = FWD) & turnState = T0) -> next(turnState) = T1);

guarantee
	alw (turnState = T1  -> (next(turnState) = T2 & nextMoveMode = TURN_LEFT));

guarantee
	alw ((turnState = T2 & nextMoveMode = TURN_LEFT)  -> next(turnState) = T1);
	
guarantee
	alw ((turnState = T2 & nextMoveMode = FWD) -> next(turnState) = T3);
	
guarantee
	alw ((turnState = T3 & nextMoveMode = FWD) -> next(turnState = T0));

guarantee
	alw ((turnState = T3 & nextMoveMode != FWD) -> next(turnState = T2));
	
//LTLSPEC
	//alw (nextMoveMode = TURN_LEFT <-> (next(turnState) = T1 | next(turnState) = T2));

guarantee
	alw ((turnState = T2 & Obstacle = CLEAR) -> nextMoveMode = FWD);

////////////////////////////////////////////////////////////////
/*
 * 						MOVEMENT - TURNNING
 * 
 * 
 * Some technical limitations on the movement
 * Starting to turn and stoping needs a calibration from FWD movement
 */
 ////////////////////////////////////////////////////////////////

guarantee
	alw ((turnState = T0 & next(turnState) = T1) <-> (LeftMotor = CALIB_TURN & RightMotor = CALIB_TURN)); 

guarantee
	alw (next(turnState) = T2 <-> (LeftMotor = FWD & RightMotor = TURN_FWD));
	
guarantee
	alw (turnState = T2 <-> (LeftMotor = BWD & RightMotor = TURN_BWD));
	
guarantee
	alw ((turnState = T3 & turnState = T0) <-> (LeftMotor = CALIB_FWD & RightMotor = CALIB_FWD));

////////////////////////////////////////////////////////////////
/*
 * 						ENVIRONMENT - ASSUMPTIONS
 * 
 */
 ////////////////////////////////////////////////////////////////

assumption
	alw ((Y(nextMoveMode = FWD) & Obstacle = BLOCKED) -> next(Obstacle = BLOCKED));
	//alw ((nextMoveMode != FWD) -> F(Obstacle = CLEAR));

assumption
	alw ((Y(nextMoveMode = BWD) & Obstacle = CLEAR) -> (next(Obstacle != BLOCKED)));
	
//LTLSPECENV
	//alw ((Y(Y(spec_nextMoveMode = TURN_LEFT_2)) & Y(spec_nextMoveMode = FWD)) -> Obstacle = CLEAR);
	//alw ((nextMoveMode = TURN_LEFT_2) -> F(nextMoveMode = TURN_LEFT_2 & Obstacle = CLEAR));
	//alw (turnState = T1 -> (F(turnState) = T0));
	//alw (turnState = T2 -> (Obstacle = CLEAR));

/*LTLSPECENV
	alw (turnState = T3 -> Obstacle = CLEAR);

LTLSPECENV
	alw (turnState = T3 -> next(Obstacle = CLEAR));
	
LTLSPECENV
	alw ((turnState = T2 & Obstacle = CLEAR) -> next(Obstacle = CLEAR));*/
