Using BDD Package: CUDDFactory, Version: CUDD 3.0
Using BDD Package: CUDDFactory, Version: CUDD 3.0
0    [main] ERROR xt.validation.ResourceValidatorImpl  - The string resource '_UI_DiagnosticRoot_diagnostic' could not be located
java.util.MissingResourceException: The string resource '_UI_DiagnosticRoot_diagnostic' could not be located
	at org.eclipse.emf.common.util.DelegatingResourceLocator.delegatedGetString(DelegatingResourceLocator.java:586)
	at org.eclipse.emf.common.util.DelegatingResourceLocator.getString(DelegatingResourceLocator.java:450)
	at org.eclipse.emf.common.util.DelegatingResourceLocator.getString(DelegatingResourceLocator.java:605)
	at org.eclipse.emf.common.util.DelegatingResourceLocator.getString(DelegatingResourceLocator.java:597)
	at org.eclipse.emf.ecore.util.Diagnostician.createDefaultDiagnostic(Diagnostician.java:110)
	at org.eclipse.emf.ecore.util.Diagnostician.validate(Diagnostician.java:139)
	at org.eclipse.xtext.validation.ResourceValidatorImpl.validate(ResourceValidatorImpl.java:147)
	at org.eclipse.xtext.validation.ResourceValidatorImpl.validate(ResourceValidatorImpl.java:125)
	at org.eclipse.xtext.validation.ResourceValidatorImpl.validate(ResourceValidatorImpl.java:91)
	at tau.smlab.syntech.spectragameinput.SpectraInputProviderNoIDE.getSpectraModel(SpectraInputProviderNoIDE.java:166)
	at tau.smlab.syntech.spectragameinput.SpectraInputProviderNoIDE.getGameInput(SpectraInputProviderNoIDE.java:109)
	at tau.smlab.syntech.Spectra.cli.SpecRepair.executeAlgorithm(SpecRepair.java:71)
	at tau.smlab.syntech.Spectra.cli.SpecRepair.main(SpecRepair.java:58)
Executing "inputs-translation/SYNTECH15-UNREAL-TRANSLATED-2/GyroUnrealizable_Var1_710_GyroAspect_unrealizable.spectra".
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 101
Nodes table size: 1022
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 161
Nodes table size: 2044
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4883
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4883
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4889
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4899
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4890
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4890
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4890
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4902
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4892
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4892
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4892
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4902
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4892
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4892
Nodes table size: 10220
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 4902
Nodes table size: 10220
Found 15 repair suggestions
Number of well-separated suggestions is 10
Maximum variables in the best repair is 5
Maximum Node count: 5

Repair #1 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(backDistSense_0=false -> 
		(isReady=true -> 
			(balancer_0=false and (balancer_1=false and balancer_2=true)))));

//Initial//

]

Repair #2 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(next(frontDistSense_0)=false -> 
		(backDistSense_0=false -> 
			(next(backDistSense_0)=false -> 
				(isReady=false -> 
					(next(isReady)=true -> 
						(balancer_0=false -> 
							(balancer_1=false -> balancer_2=true)))) and
				(isReady=true -> 
					(next(isReady)=true -> 
						(balancer_0=false -> 
							(balancer_1=false -> balancer_2=false)))))) and
		(backDistSense_0=true -> 
			(next(backDistSense_0)=false -> 
				(isReady=true -> 
					(next(isReady)=true -> 
						(balancer_0=false -> 
							(balancer_1=false -> balancer_2=false))))))));

//Initial//

]

Repair #3 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(next(frontDistSense_0)=false -> 
		(backDistSense_0=false -> 
			(isReady=true -> 
				(next(isReady)=true -> 
					(balancer_0=false -> 
						(balancer_1=false -> balancer_2=false)))))));

//Initial//

]

Repair #4 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(isReady=true -> 
		(balancer_0=false and (balancer_1=false and balancer_2=true))));

//Initial//

]

Repair #5 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(next(frontDistSense_0)=false -> 
		(backDistSense_0=false -> 
			(isReady=false -> 
				(next(isReady)=true -> 
					(balancer_0=false -> 
						(balancer_1=false -> balancer_2=true)))) and
			(isReady=true -> 
				(next(isReady)=true -> 
					(balancer_0=false -> 
						(balancer_1=false -> balancer_2=false)))))));

//Initial//

]

Repair #6 [

//Justices//
asm GF (frontDistSense_0=false -> 
	(isReady=true -> 
		(balancer_0=false -> 
			(balancer_1=false -> balancer_2=false))));

//Transitions//

//Initial//

]

Repair #7 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(next(frontDistSense_0)=false -> 
		(isReady=true -> 
			(next(isReady)=true -> 
				(balancer_0=false -> 
					(balancer_1=false -> balancer_2=false))))));

//Initial//

]

Repair #8 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(isReady=true -> 
		(balancer_0=false and (balancer_1=false and balancer_2=true))));

//Initial//

]

Repair #9 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(next(frontDistSense_0)=false -> 
		(backDistSense_0=false -> 
			(isReady=false -> 
				(next(isReady)=true -> 
					(balancer_0=false -> 
						(balancer_1=false -> balancer_2=true)))) and
			(isReady=true -> 
				(next(isReady)=true -> 
					(balancer_0=false -> 
						(balancer_1=false -> balancer_2=false)))))));

//Initial//

]

Repair #10 [

//Justices//
asm GF (frontDistSense_0=false -> 
	(isReady=true -> 
		(balancer_0=false -> 
			(balancer_1=false -> balancer_2=false))));

//Transitions//

//Initial//

]

Repair #11 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(next(frontDistSense_0)=false -> 
		(isReady=true -> 
			(next(isReady)=true -> 
				(balancer_0=false -> 
					(balancer_1=false -> balancer_2=false))))));

//Initial//

]

Repair #12 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(isReady=true -> 
		(balancer_0=false and (balancer_1=false and balancer_2=true))));

//Initial//

]

Repair #13 [

//Justices//
asm GF (frontDistSense_0=false -> 
	(isReady=true -> 
		(balancer_0=false -> 
			(balancer_1=false -> balancer_2=false))));

//Transitions//

//Initial//

]

Repair #14 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(next(frontDistSense_0)=false -> 
		(isReady=true -> 
			(next(isReady)=true -> 
				(balancer_0=false -> 
					(balancer_1=false -> balancer_2=false))))));

//Initial//

]

Repair #15 [

//Justices//

//Transitions//
asm G (frontDistSense_0=false -> 
	(isReady=true -> 
		(balancer_0=false and (balancer_1=false and balancer_2=true))));

//Initial//

]

runtime of repair operation was 166 in millisecs.

