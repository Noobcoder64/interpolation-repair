Using BDD Package: CUDDFactory, Version: CUDD 3.0
Using BDD Package: CUDDFactory, Version: CUDD 3.0
1    [main] ERROR xt.validation.ResourceValidatorImpl  - The string resource '_UI_DiagnosticRoot_diagnostic' could not be located
java.util.MissingResourceException: The string resource '_UI_DiagnosticRoot_diagnostic' could not be located
	at org.eclipse.emf.common.util.DelegatingResourceLocator.delegatedGetString(DelegatingResourceLocator.java:586)
	at org.eclipse.emf.common.util.DelegatingResourceLocator.getString(DelegatingResourceLocator.java:450)
	at org.eclipse.emf.common.util.DelegatingResourceLocator.getString(DelegatingResourceLocator.java:605)
	at org.eclipse.emf.common.util.DelegatingResourceLocator.getString(DelegatingResourceLocator.java:597)
	at org.eclipse.emf.ecore.util.Diagnostician.createDefaultDiagnostic(Diagnostician.java:110)
	at org.eclipse.emf.ecore.util.Diagnostician.validate(Diagnostician.java:139)
	at org.eclipse.xtext.validation.ResourceValidatorImpl.validate(ResourceValidatorImpl.java:147)
	at org.eclipse.xtext.validation.ResourceValidatorImpl.validate(ResourceValidatorImpl.java:125)
	at org.eclipse.xtext.validation.ResourceValidatorImpl.validate(ResourceValidatorImpl.java:91)
	at tau.smlab.syntech.spectragameinput.SpectraInputProviderNoIDE.getSpectraModel(SpectraInputProviderNoIDE.java:166)
	at tau.smlab.syntech.spectragameinput.SpectraInputProviderNoIDE.getGameInput(SpectraInputProviderNoIDE.java:109)
	at tau.smlab.syntech.Spectra.cli.SpecRepair.executeAlgorithm(SpecRepair.java:71)
	at tau.smlab.syntech.Spectra.cli.SpecRepair.main(SpecRepair.java:58)
Executing "inputs-translation/SYNTECH15-UNREAL-ORIGINAL/HumanoidLTL_531_Humanoid_unrealizable.spectra".
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 597
Nodes table size: 3066
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 757
Nodes table size: 8176
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:1, 1 elements
Checking: 1:2, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
Checking: 0:2, 2 elements
Checking: 2:3, 1 elements
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97864
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97934
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97920
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97930
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97949
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97923
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97892
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97930
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97949
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97923
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97918
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97936
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97936
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97936
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97936
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97936
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97936
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97936
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97936
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97969
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97988
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97931
Nodes table size: 286160
GR1GameImplC.checkRealizability: start
GR1GameImplC.checkRealizability: end
Nodes num: 97962
Nodes table size: 286160
Found 107 repair suggestions
Number of well-separated suggestions is 9
Maximum variables in the best repair is 4
Maximum Node count: 28

Repair #1 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #2 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #3 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #4 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #5 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #6 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #7 [

//Justices//
asm GF (LeftMotor=FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=BWD -> 
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=STOP -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_TURN -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})));

//Transitions//

//Initial//

]

Repair #8 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #9 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #10 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #11 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q0)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))));

//Initial//

]

Repair #12 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #13 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #14 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #15 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #16 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #17 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #18 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #19 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #20 [

//Justices//
asm GF (Obstacle=CLEAR -> 
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 -> state=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3))));

//Transitions//

//Initial//

]

Repair #21 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #22 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #23 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #24 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #25 [

//Justices//
asm GF (LeftMotor=FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=BWD -> 
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=STOP -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_TURN -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})));

//Transitions//

//Initial//

]

Repair #26 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #27 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #28 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #29 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q0)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))));

//Initial//

]

Repair #30 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #31 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #32 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #33 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #34 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #35 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #36 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #37 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #38 [

//Justices//
asm GF (Obstacle=CLEAR -> 
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 -> state=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3))));

//Transitions//

//Initial//

]

Repair #39 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #40 [

//Justices//
asm GF (LeftMotor=FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=BWD -> 
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=STOP -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_TURN -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})));

//Transitions//

//Initial//

]

Repair #41 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q0)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))));

//Initial//

]

Repair #42 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #43 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #44 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #45 [

//Justices//
asm GF (LeftMotor=FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=BWD -> 
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=STOP -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_TURN -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})));

//Transitions//

//Initial//

]

Repair #46 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #47 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #48 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #49 [

//Justices//
asm GF (LeftMotor=FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=BWD -> 
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=STOP -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_TURN -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})));

//Transitions//

//Initial//

]

Repair #50 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #51 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #52 [

//Justices//
asm GF (Obstacle=CLEAR -> 
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 -> state=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3))));

//Transitions//

//Initial//

]

Repair #53 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #54 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q0)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))));

//Initial//

]

Repair #55 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #56 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #57 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #58 [

//Justices//
asm GF (LeftMotor=FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=BWD -> 
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=STOP -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_TURN -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})));

//Transitions//

//Initial//

]

Repair #59 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q0)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))));

//Initial//

]

Repair #60 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #61 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #62 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #63 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q0)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))));

//Initial//

]

Repair #64 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #65 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #66 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #67 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q0)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))));

//Initial//

]

Repair #68 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #69 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #70 [

//Justices//
asm GF (Obstacle=CLEAR -> 
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 -> state=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3))));

//Transitions//

//Initial//

]

Repair #71 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #72 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #73 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #74 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #75 [

//Justices//
asm GF (LeftMotor=FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=BWD -> 
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=STOP -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_TURN -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})));

//Transitions//

//Initial//

]

Repair #76 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #77 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #78 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #79 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q0)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))));

//Initial//

]

Repair #80 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #81 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #82 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #83 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #84 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #85 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #86 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #87 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #88 [

//Justices//
asm GF (Obstacle=CLEAR -> 
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 -> state=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3))));

//Transitions//

//Initial//

]

Repair #89 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #90 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #91 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #92 [

//Justices//
asm GF (Obstacle=CLEAR -> 
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 -> state=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3))));

//Transitions//

//Initial//

]

Repair #93 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #94 [

//Justices//
asm GF (LeftMotor=FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=BWD -> 
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=STOP -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_TURN -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_FWD -> 
		(moveMode=BWD -> state={Q1, Q3}))) and
(LeftMotor=CALIB_FWD -> 
	(RightMotor=FWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=BWD -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=STOP -> 
		(moveMode=BWD -> state={Q1, Q3})) and
	(RightMotor=CALIB_TURN -> 
		(moveMode=BWD -> state={Q1, Q3})));

//Transitions//

//Initial//

]

Repair #95 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #96 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #97 [

//Justices//
asm GF (Obstacle=CLEAR -> 
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 -> state=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3))));

//Transitions//

//Initial//

]

Repair #98 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #99 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q0)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state={Q2, Q3}) and
			(moveMode=BWD -> state!=Q0))));

//Initial//

]

Repair #100 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #101 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #102 [

//Justices//
asm GF (Obstacle=CLEAR -> 
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 -> state=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3))));

//Transitions//

//Initial//

]

Repair #103 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

Repair #104 [

//Justices//

//Transitions//
asm G (next(Obstacle)=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=BWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD -> state!=Q1))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=BWD -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=STOP -> 
			(moveMode=BWD -> state!=Q1)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD -> state!=Q1))));

//Initial//

]

Repair #105 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=BWD -> state={Q0, Q3})))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=BWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			(moveMode=FWD -> state!=Q2) and
			(moveMode=BWD -> state={Q0, Q3}))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=CALIB_TURN -> 
			(moveMode=FWD -> state=Q3))));

//Initial//

]

Repair #106 [

//Justices//
asm GF (Obstacle=CLEAR -> 
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3)))) and
(Obstacle=BLOCKED -> 
	(LeftMotor=FWD -> 
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 -> state=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 -> state=Q3))));

//Transitions//

//Initial//

]

Repair #107 [

//Justices//

//Transitions//
asm G (Obstacle=CLEAR -> 
	(LeftMotor=FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode!={BWD, TURN_LEFT_2} and
			(moveMode=TURN_LEFT_1 -> state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=BWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode!={BWD, TURN_LEFT_1} and
			(moveMode=TURN_LEFT_2 -> state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=TURN_FWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=TURN_BWD -> 
		(RightMotor!={} and moveMode=FWD)) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode=FWD) and
		(RightMotor=CALIB_FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor=FWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=BWD -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=STOP -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			moveMode=FWD) and
		(RightMotor=TURN_BWD -> 
			moveMode=FWD) and
		(RightMotor=CALIB_TURN -> 
			moveMode!={TURN_LEFT_1, TURN_LEFT_2} and
			(moveMode=BWD -> state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			moveMode=FWD))) and
(Obstacle=BLOCKED -> 
	LeftMotor!={TURN_FWD, TURN_BWD} and
	(LeftMotor=FWD -> 
		RightMotor!=TURN_BWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_FWD -> 
			(moveMode=TURN_LEFT_1 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=BWD -> 
		RightMotor!=TURN_FWD and
		(RightMotor=FWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=BWD -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=STOP -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=TURN_BWD -> 
			(moveMode=TURN_LEFT_2 and state!=Q3)) and
		(RightMotor=CALIB_TURN -> 
			(moveMode=BWD and state!=Q3)) and
		(RightMotor=CALIB_FWD -> 
			(moveMode=BWD and state!=Q3))) and
	(LeftMotor=STOP -> 
		(RightMotor!={TURN_FWD, TURN_BWD} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_TURN -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_TURN} and (moveMode=BWD and state!=Q3))) and
	(LeftMotor=CALIB_FWD -> 
		(RightMotor!={TURN_FWD, TURN_BWD, CALIB_FWD} and (moveMode=BWD and state!=Q3))));

//Initial//

]

runtime of repair operation was 5933 in millisecs.

