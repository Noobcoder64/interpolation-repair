
module ColorSortLTL3TAG_787_ColorSort_1

env boolean color_0;
env boolean color_1;
env boolean color_2;
assumption
	G (!(color_0 & color_1 & !color_2));
assumption
	G (!(color_0 & color_1 & color_2));

env boolean detect_0;
env boolean detect_1;
env boolean detect_2;
assumption
	G (!(detect_0 & detect_1 & !detect_2));
assumption
	G (!(detect_0 & detect_1 & detect_2));

env boolean ack_ver_0;

env boolean ack_hor_0;

env boolean ack_bot_0;

env boolean starting_pos_0;

env boolean speedButton_0;


sys boolean verMot_0;

sys boolean horMot_0;

sys boolean botMot_0;
sys boolean botMot_1;
guarantee
	G (!(botMot_0 & botMot_1));

sys boolean motSpeed_0;
sys boolean motSpeed_1;
guarantee
	G (!(motSpeed_0 & motSpeed_1));

sys boolean spec_currentColor_0;
sys boolean spec_currentColor_1;
sys boolean spec_currentColor_2;
guarantee
	G (!(spec_currentColor_0 & spec_currentColor_1 & !spec_currentColor_2));
guarantee
	G (!(spec_currentColor_0 & spec_currentColor_1 & spec_currentColor_2));

sys boolean spec_dropping;
sys boolean spec_speedButtonValidPressed;
sys boolean spec_waiting_ack_ver_mot;
sys boolean spec_waiting_ack_hor_mot;

aux boolean sYS_CONSTRAINT_0_respondsTo_responded;
aux boolean eNV_CONSTRAINT_1_respondsTo_responded;
aux boolean eNV_CONSTRAINT_2_respondsTo_responded;
aux boolean pREV_aux_3;

assumption
	G ((!(spec_waiting_ack_ver_mot) -> (ack_ver_0)));
assumption
	GF (!((!color_0 & !color_1 & color_2)));
assumption
	GF ((!ack_hor_0));
assumption
	GF (eNV_CONSTRAINT_1_respondsTo_responded);
assumption
	GF (eNV_CONSTRAINT_2_respondsTo_responded);

guarantee
	G (((!verMot_0) -> ((!botMot_0 & botMot_1) & (horMot_0))));
guarantee
	G (((!horMot_0) -> ((!botMot_0 & botMot_1) & (verMot_0))));
guarantee
	G ((!((!botMot_0 & botMot_1)) -> ((verMot_0) & (horMot_0))));
guarantee
	G ((((!ack_ver_0) | (!ack_hor_0)) -> (((verMot_0) & (horMot_0)) & (!botMot_0 & botMot_1))));
guarantee
	G (((verMot_0) -> ((spec_currentColor_0 <-> next(spec_currentColor_0)) & (spec_currentColor_1 <-> next(spec_currentColor_1)) & (spec_currentColor_2 <-> next(spec_currentColor_2)))));
guarantee
	G (((!verMot_0) -> ((color_0 <-> next(spec_currentColor_0)) & (color_1 <-> next(spec_currentColor_1)) & (color_2 <-> next(spec_currentColor_2)))));
guarantee
	G (((spec_dropping <-> next(spec_dropping)) <-> ((verMot_0) & (horMot_0))));
guarantee
	 ((!(spec_dropping) & (!motSpeed_0 & !motSpeed_1)));
guarantee
	G ((((!(spec_dropping) & (starting_pos_0)) & ((ack_ver_0) & (ack_hor_0))) <-> (botMot_0 & !botMot_1)));
guarantee
	G ((((!(spec_dropping) & (!starting_pos_0)) & (!color_0 & !color_1 & color_2)) -> (((verMot_0) & (horMot_0)) & (!botMot_0 & botMot_1))));
guarantee
	G ((((!color_0 & !color_1 & color_2) | spec_dropping) -> (verMot_0)));
guarantee
	G (((((!(spec_dropping) & (!starting_pos_0)) & (((ack_ver_0) & (ack_hor_0)) & (ack_bot_0))) & !((!color_0 & !color_1 & color_2))) <-> (!verMot_0)));
guarantee
	G ((((spec_dropping & !((((detect_0 <-> spec_currentColor_0) | (detect_1 <-> spec_currentColor_1) | (detect_2 <-> spec_currentColor_2))))) & ((ack_ver_0) & (ack_hor_0))) <-> (!botMot_0 & !botMot_1)));
guarantee
	G ((((spec_dropping & (((detect_0 <-> spec_currentColor_0) | (detect_1 <-> spec_currentColor_1) | (detect_2 <-> spec_currentColor_2)))) & ((ack_ver_0) & (ack_hor_0))) <-> (!horMot_0)));
guarantee
	G ((((!speedButton_0) & pREV_aux_3) <-> spec_speedButtonValidPressed));
guarantee
	G (((spec_speedButtonValidPressed & (!motSpeed_0 & !motSpeed_1)) -> (next(!motSpeed_0) & next(motSpeed_1))));
guarantee
	G (((spec_speedButtonValidPressed & (!motSpeed_0 & motSpeed_1)) -> (next(motSpeed_0) & next(!motSpeed_1))));
guarantee
	G (((spec_speedButtonValidPressed & (motSpeed_0 & !motSpeed_1)) -> (next(!motSpeed_0) & next(!motSpeed_1))));
guarantee
	G ((!(spec_speedButtonValidPressed) -> ((motSpeed_0 <-> next(motSpeed_0)) & (motSpeed_1 <-> next(motSpeed_1)))));
guarantee
	 (!(spec_waiting_ack_ver_mot));
guarantee
	G (((!(spec_waiting_ack_ver_mot) & !((!verMot_0))) -> !(next(spec_waiting_ack_ver_mot))));
guarantee
	G (((!(spec_waiting_ack_ver_mot) & (!verMot_0)) -> next(spec_waiting_ack_ver_mot)));
guarantee
	G (((spec_waiting_ack_ver_mot & (ack_ver_0)) -> !(next(spec_waiting_ack_ver_mot))));
guarantee
	G (((spec_waiting_ack_ver_mot & !((ack_ver_0))) -> next(spec_waiting_ack_ver_mot)));
guarantee
	 (!(spec_waiting_ack_hor_mot));
guarantee
	G (((!(spec_waiting_ack_hor_mot) & !((!horMot_0))) -> !(next(spec_waiting_ack_hor_mot))));
guarantee
	G (((!(spec_waiting_ack_hor_mot) & (!horMot_0)) -> next(spec_waiting_ack_hor_mot)));
guarantee
	G (((spec_waiting_ack_hor_mot & (ack_hor_0)) -> !(next(spec_waiting_ack_hor_mot))));
guarantee
	G (((spec_waiting_ack_hor_mot & !((ack_hor_0))) -> next(spec_waiting_ack_hor_mot)));
guarantee
	GF ((!horMot_0));
guarantee
	GF (sYS_CONSTRAINT_0_respondsTo_responded);

guarantee
	 (sYS_CONSTRAINT_0_respondsTo_responded);
guarantee
	G ((next(sYS_CONSTRAINT_0_respondsTo_responded) <-> (((!horMot_0) & (((detect_0 <-> spec_currentColor_0) | (detect_1 <-> spec_currentColor_1) | (detect_2 <-> spec_currentColor_2)))) | (sYS_CONSTRAINT_0_respondsTo_responded & !(!((!color_0 & !color_1 & color_2)))))));
guarantee
	 (eNV_CONSTRAINT_1_respondsTo_responded);
guarantee
	G ((next(eNV_CONSTRAINT_1_respondsTo_responded) <-> ((ack_ver_0) | (eNV_CONSTRAINT_1_respondsTo_responded & !(spec_waiting_ack_ver_mot)))));
guarantee
	 (eNV_CONSTRAINT_2_respondsTo_responded);
guarantee
	G ((next(eNV_CONSTRAINT_2_respondsTo_responded) <-> ((ack_hor_0) | (eNV_CONSTRAINT_2_respondsTo_responded & !(spec_waiting_ack_hor_mot)))));
guarantee
	 (!(pREV_aux_3));
guarantee
	G ((next(pREV_aux_3) <-> (speedButton_0)));


assumption
	GF (!(horMot_0 & !color_2 & sYS_CONSTRAINT_0_respondsTo_responded));

assumption
	FALSE;
