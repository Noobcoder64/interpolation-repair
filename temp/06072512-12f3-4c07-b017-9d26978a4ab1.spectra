
module amba_ahb_wo_ass_fairness_amba_ahb_2

env boolean hready;
env boolean hbusreq0;
env boolean hlock0;
env boolean hbusreq1;
env boolean hlock1;
env boolean hburst0;
env boolean hburst1;

sys boolean hmaster0;
sys boolean hmastlock;
sys boolean start;
sys boolean decide;
sys boolean hlocked;
sys boolean hgrant0;
sys boolean hgrant1;
sys boolean stateA1_0;
sys boolean stateA1_1;
sys boolean stateG2_0;
sys boolean stateG2_1;
sys boolean stateG3_0;
sys boolean stateG3_1;
sys boolean stateG3_2;
sys boolean stateG10_1;


assumption
	 ((!hready));
assumption
	 ((!hbusreq0));
assumption
	 ((!hlock0));
assumption
	 ((!hbusreq1));
assumption
	 ((!hlock1));
assumption
	 ((!hburst0));
assumption
	 ((!hburst1));
assumption
	G ((hlock0 -> hbusreq0));
assumption
	G ((hlock1 -> hbusreq1));
assumption
	GF (hready);

guarantee
	 ((!hmaster0));
guarantee
	 ((!hmastlock));
guarantee
	 (start);
guarantee
	 (decide);
guarantee
	 ((!hlocked));
guarantee
	 (hgrant0);
guarantee
	 ((!hgrant1));
guarantee
	 ((!stateA1_0));
guarantee
	 ((!stateA1_1));
guarantee
	 ((!stateG2_0));
guarantee
	 ((!stateG2_1));
guarantee
	 ((!stateG3_0));
guarantee
	 ((!stateG3_1));
guarantee
	 ((!stateG3_2));
guarantee
	 ((!stateG10_1));
guarantee
	G (((((!stateA1_0) & (!stateA1_1)) & ((!hmastlock) | (hburst0 | hburst1))) -> ((next(!stateA1_0)) & (next(!stateA1_1)))));
guarantee
	G (((((!stateA1_0) & (!stateA1_1)) & ((hmastlock & (!hmaster0)) & ((!hburst0) & (!hburst1)))) -> (next(stateA1_0) & (next(!stateA1_1)))));
guarantee
	G ((((stateA1_0 & (!stateA1_1)) & hbusreq0) -> (next(stateA1_0) & (next(!stateA1_1)))));
guarantee
	G ((((stateA1_0 & (!stateA1_1)) & (!hbusreq0)) -> ((next(!stateA1_0)) & (next(!stateA1_1)))));
guarantee
	G (((((!stateA1_0) & (!stateA1_1)) & ((hmastlock & hmaster0) & ((!hburst0) & (!hburst1)))) -> ((next(!stateA1_0)) & next(stateA1_1))));
guarantee
	G (((((!stateA1_0) & stateA1_1) & hbusreq1) -> ((next(!stateA1_0)) & next(stateA1_1))));
guarantee
	G (((((!stateA1_0) & stateA1_1) & (!hbusreq1)) -> ((next(!stateA1_0)) & (next(!stateA1_1)))));
guarantee
	G (((!hready) -> (next(!start))));
guarantee
	G ((((!stateG2_0) & (!hmastlock)) -> (next(!stateG2_0))));
guarantee
	G ((((!stateG2_0) & (!start)) -> (next(!stateG2_0))));
guarantee
	G ((((!stateG2_0) & hburst0) -> (next(!stateG2_0))));
guarantee
	G ((((!stateG2_0) & hburst1) -> (next(!stateG2_0))));
guarantee
	G ((((!stateG2_0) & !((!hmaster0))) -> (next(!stateG2_0))));
guarantee
	G ((((((((!stateG2_0) & hmastlock) & start) & (!hburst0)) & (!hburst1)) & (!hmaster0)) -> next(stateG2_0)));
guarantee
	G ((((stateG2_0 & (!start)) & hbusreq0) -> next(stateG2_0)));
guarantee
	G (((stateG2_0 & start) -> FALSE));
guarantee
	G ((((stateG2_0 & (!start)) & (!hbusreq0)) -> (next(!stateG2_0))));
guarantee
	G ((((!stateG2_1) & (!hmastlock)) -> (next(!stateG2_1))));
guarantee
	G ((((!stateG2_1) & (!start)) -> (next(!stateG2_1))));
guarantee
	G ((((!stateG2_1) & hburst0) -> (next(!stateG2_1))));
guarantee
	G ((((!stateG2_1) & hburst1) -> (next(!stateG2_1))));
guarantee
	G ((((!stateG2_1) & !(hmaster0)) -> (next(!stateG2_1))));
guarantee
	G ((((((((!stateG2_1) & hmastlock) & start) & (!hburst0)) & (!hburst1)) & hmaster0) -> next(stateG2_1)));
guarantee
	G ((((stateG2_1 & (!start)) & hbusreq1) -> next(stateG2_1)));
guarantee
	G (((stateG2_1 & start) -> FALSE));
guarantee
	G ((((stateG2_1 & (!start)) & (!hbusreq1)) -> (next(!stateG2_1))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & (!stateG3_2)) & (((!hmastlock) | (!start)) | (hburst0 | (!hburst1)))) -> (((next(!stateG3_0)) & (next(!stateG3_1))) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & (!stateG3_2)) & (((hmastlock & start) & ((!hburst0) & hburst1)) & (!hready))) -> ((next(stateG3_0) & (next(!stateG3_1))) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & (!stateG3_2)) & (((hmastlock & start) & ((!hburst0) & hburst1)) & hready)) -> (((next(!stateG3_0)) & next(stateG3_1)) & (next(!stateG3_2)))));
guarantee
	G (((((stateG3_0 & (!stateG3_1)) & (!stateG3_2)) & ((!start) & (!hready))) -> ((next(stateG3_0) & (next(!stateG3_1))) & (next(!stateG3_2)))));
guarantee
	G (((((stateG3_0 & (!stateG3_1)) & (!stateG3_2)) & ((!start) & hready)) -> (((next(!stateG3_0)) & next(stateG3_1)) & (next(!stateG3_2)))));
guarantee
	G (((((stateG3_0 & (!stateG3_1)) & (!stateG3_2)) & start) -> FALSE));
guarantee
	G ((((((!stateG3_0) & stateG3_1) & (!stateG3_2)) & ((!start) & (!hready))) -> (((next(!stateG3_0)) & next(stateG3_1)) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & stateG3_1) & (!stateG3_2)) & ((!start) & hready)) -> (next(stateG3_0 & stateG3_1) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & stateG3_1) & (!stateG3_2)) & start) -> FALSE));
guarantee
	G (((((stateG3_0 & stateG3_1) & (!stateG3_2)) & ((!start) & (!hready))) -> (next(stateG3_0 & stateG3_1) & (next(!stateG3_2)))));
guarantee
	G (((((stateG3_0 & stateG3_1) & (!stateG3_2)) & ((!start) & hready)) -> (((next(!stateG3_0)) & (next(!stateG3_1))) & next(stateG3_2))));
guarantee
	G (((((stateG3_0 & stateG3_1) & (!stateG3_2)) & start) -> FALSE));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & stateG3_2) & ((!start) & (!hready))) -> (((next(!stateG3_0)) & (next(!stateG3_1))) & next(stateG3_2))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & stateG3_2) & ((!start) & hready)) -> (((next(!stateG3_0)) & (next(!stateG3_1))) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & stateG3_2) & start) -> FALSE));
guarantee
	G ((hready -> (hgrant0 <-> (next(!hmaster0)))));
guarantee
	G ((hready -> (hgrant1 <-> next(hmaster0))));
guarantee
	G ((hready -> ((!hlocked) <-> (next(!hmastlock)))));
guarantee
	G (((next(!start)) -> ((!hmaster0) <-> (next(!hmaster0)))));
guarantee
	G (((next(!start)) -> (hmaster0 <-> next(hmaster0))));
guarantee
	G (((next(!start)) -> (hmastlock <-> next(hmastlock))));
guarantee
	G ((((decide & hlock0) & next(hgrant0)) -> next(hlocked)));
guarantee
	G ((((decide & (!hlock0)) & next(hgrant0)) -> (next(!hlocked))));
guarantee
	G ((((decide & hlock1) & next(hgrant1)) -> next(hlocked)));
guarantee
	G ((((decide & (!hlock1)) & next(hgrant1)) -> (next(!hlocked))));
guarantee
	G ((((decide & (!hbusreq0)) & (!hbusreq1)) -> next(hgrant0)));
guarantee
	G (((!decide) -> ((!hgrant0) <-> (next(!hgrant0)))));
guarantee
	G (((!decide) -> ((!hgrant1) <-> (next(!hgrant1)))));
guarantee
	G (((!decide) -> ((!hlocked) <-> (next(!hlocked)))));
guarantee
	G ((((!stateG10_1) & (hgrant1 | hbusreq1)) -> (next(!stateG10_1))));
guarantee
	G ((((!stateG10_1) & ((!hgrant1) & (!hbusreq1))) -> next(stateG10_1)));
guarantee
	G (((stateG10_1 & ((!hgrant1) & (!hbusreq1))) -> next(stateG10_1)));
guarantee
	G (((stateG10_1 & (hgrant1 & (!hbusreq1))) -> FALSE));
guarantee
	G (((stateG10_1 & hbusreq1) -> (next(!stateG10_1))));
guarantee
	GF ((!stateG2_0));
guarantee
	GF ((!stateG2_1));
guarantee
	GF ((((!stateG3_0) & (!stateG3_1)) & (!stateG3_2)));
guarantee
	GF (((!hmaster0) | (!hbusreq0)));
guarantee
	GF ((hmaster0 | (!hbusreq1)));



assumption
	G((hgrant1 & !hmaster0 & hready) -> next(!(!hready)));

assumption
	G(!(hready));
