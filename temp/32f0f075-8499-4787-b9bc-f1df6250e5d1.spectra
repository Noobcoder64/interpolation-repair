
module HumanoidLTL_533_Humanoid_2

env boolean obstacle_0;


sys boolean leftMotor_0;
sys boolean leftMotor_1;
sys boolean leftMotor_2;
guarantee
	G (!(leftMotor_0 & leftMotor_1 & leftMotor_2));

sys boolean rightMotor_0;
sys boolean rightMotor_1;
sys boolean rightMotor_2;
guarantee
	G (!(rightMotor_0 & rightMotor_1 & rightMotor_2));

sys boolean headMotor_0;
sys boolean headMotor_1;
guarantee
	G (!(headMotor_0 & headMotor_1));

sys boolean nextMoveMode_0;
sys boolean nextMoveMode_1;

sys boolean state_0;
sys boolean state_1;


aux boolean eNV_CONSTRAINT_0_respondsTo_responded;
aux boolean pREV_aux_1;
aux boolean pREV_aux_2;
aux boolean pREV_aux_3;
aux boolean pREV_aux_4;
aux boolean pREV_aux_5;

assumption
	G ((((!nextMoveMode_0 & nextMoveMode_1) & (!obstacle_0)) -> !((next(obstacle_0)))));
assumption
	GF ((pREV_aux_3 & (!obstacle_0)));
assumption
	GF (eNV_CONSTRAINT_0_respondsTo_responded);

guarantee
	G (((((!state_0 & !state_1) & (!nextMoveMode_0 & !nextMoveMode_1)) & (next(!nextMoveMode_0) & next(nextMoveMode_1))) -> (next(!state_0) & next(state_1))));
guarantee
	G (((((!state_0 & state_1) & (!nextMoveMode_0 & nextMoveMode_1)) & (next(!nextMoveMode_0) & next(!nextMoveMode_1))) -> (next(state_0) & next(!state_1))));
guarantee
	G (((((state_0 & !state_1) & (!nextMoveMode_0 & !nextMoveMode_1)) & (next(!nextMoveMode_0) & next(nextMoveMode_1))) -> (next(state_0) & next(state_1))));
guarantee
	G ((((!state_0 & state_1) & (next(!nextMoveMode_0) & next(nextMoveMode_1))) -> (next(!state_0) & next(state_1))));
guarantee
	G ((((state_0 & !state_1) & (next(!nextMoveMode_0) & next(!nextMoveMode_1))) -> (next(state_0) & next(!state_1))));
guarantee
	G ((((nextMoveMode_0 & !nextMoveMode_1) | (nextMoveMode_0 & !nextMoveMode_1)) -> (next(!state_0) & next(!state_1))));
guarantee
	G (!((state_0 & state_1)));
guarantee
	G (((obstacle_0) -> !((!nextMoveMode_0 & !nextMoveMode_1))));
guarantee
	G (((pREV_aux_1 & (!nextMoveMode_0 & !nextMoveMode_1)) <-> ((!leftMotor_0 & !leftMotor_1 & !leftMotor_2) & (!rightMotor_0 & !rightMotor_1 & rightMotor_2))));
guarantee
	G (((pREV_aux_2 & (!nextMoveMode_0 & nextMoveMode_1)) <-> ((!leftMotor_0 & !leftMotor_1 & leftMotor_2) & (!rightMotor_0 & !rightMotor_1 & !rightMotor_2))));
guarantee
	GF ((!nextMoveMode_0 & !nextMoveMode_1));
guarantee
	G (((!nextMoveMode_0 & nextMoveMode_1) -> (pREV_aux_2 | pREV_aux_1)));
guarantee
	G ((pREV_aux_3 -> !((!nextMoveMode_0 & nextMoveMode_1))));
guarantee
	G (((pREV_aux_2 & (nextMoveMode_0 & !nextMoveMode_1)) <-> ((leftMotor_0 & !leftMotor_1 & leftMotor_2) & (rightMotor_0 & !rightMotor_1 & rightMotor_2))));
guarantee
	G ((pREV_aux_1 -> !((nextMoveMode_0 & !nextMoveMode_1))));
guarantee
	G (((pREV_aux_2 & pREV_aux_4) <-> ((leftMotor_0 & leftMotor_1 & !leftMotor_2) & (rightMotor_0 & rightMotor_1 & !rightMotor_2))));
guarantee
	G ((pREV_aux_5 <-> (nextMoveMode_0 & nextMoveMode_1)));
guarantee
	G ((pREV_aux_5 -> ((!leftMotor_0 & !leftMotor_1 & !leftMotor_2) & (!rightMotor_0 & rightMotor_1 & rightMotor_2))));
guarantee
	G ((pREV_aux_3 -> ((!leftMotor_0 & !leftMotor_1 & leftMotor_2) & (rightMotor_0 & !rightMotor_1 & !rightMotor_2))));
guarantee
	G ((!((pREV_aux_5 | pREV_aux_3)) -> !(((((leftMotor_0 & !leftMotor_1 & !leftMotor_2) | (rightMotor_0 & !rightMotor_1 & !rightMotor_2)) | (!leftMotor_0 & leftMotor_1 & leftMotor_2)) | (!rightMotor_0 & rightMotor_1 & rightMotor_2)))));

guarantee
	 (eNV_CONSTRAINT_0_respondsTo_responded);
guarantee
	G ((next(eNV_CONSTRAINT_0_respondsTo_responded) <-> ((!obstacle_0) | (eNV_CONSTRAINT_0_respondsTo_responded & !(!((!nextMoveMode_0 & !nextMoveMode_1)))))));
guarantee
	 (!(pREV_aux_1));
guarantee
	G ((next(pREV_aux_1) <-> (!nextMoveMode_0 & nextMoveMode_1)));
guarantee
	 (!(pREV_aux_2));
guarantee
	G ((next(pREV_aux_2) <-> (!nextMoveMode_0 & !nextMoveMode_1)));
guarantee
	 (!(pREV_aux_3));
guarantee
	G ((next(pREV_aux_3) <-> (nextMoveMode_0 & nextMoveMode_1)));
guarantee
	 (!(pREV_aux_4));
guarantee
	G ((next(pREV_aux_4) <-> pREV_aux_3));
guarantee
	 (!(pREV_aux_5));
guarantee
	G ((next(pREV_aux_5) <-> (nextMoveMode_0 & !nextMoveMode_1)));


assumption
	FALSE;
