
module amba_ahb_wo_ass_fairness_amba_ahb_3

env boolean hready;
env boolean hbusreq0;
env boolean hlock0;
env boolean hbusreq1;
env boolean hlock1;
env boolean hbusreq2;
env boolean hlock2;
env boolean hburst0;
env boolean hburst1;

sys boolean hmaster0;
sys boolean hmaster1;
sys boolean hmastlock;
sys boolean start;
sys boolean decide;
sys boolean hlocked;
sys boolean hgrant1;
sys boolean stateG2_1;


assumption
	 ((!hready));
assumption
	 ((!hbusreq0));
assumption
	 ((!hlock0));
assumption
	 ((!hbusreq1));
assumption
	 ((!hlock1));
assumption
	 ((!hbusreq2));
assumption
	 ((!hlock2));
assumption
	 ((!hburst0));
assumption
	 ((!hburst1));
assumption
	G ((hlock0 -> hbusreq0));
assumption
	G ((hlock1 -> hbusreq1));
assumption
	G ((hlock2 -> hbusreq2));
assumption
	GF (hready);



guarantee
	G((((((((!stateG2_1)&hmastlock)&start)&(!hburst0))&(!hburst1))&(hmaster0&(!hmaster1)))->next(stateG2_1)));
guarantee
	G((((stateG2_1&(!start))&hbusreq1)->next(stateG2_1)));
guarantee
	G(((stateG2_1&start)->FALSE));
guarantee
	G((hready->(hgrant1<->(next(hmaster0)&(next(!hmaster1))))));
guarantee
	G((hready->((!hlocked)<->(next(!hmastlock)))));
guarantee
	G(((next(!start))->((hmaster0&(!hmaster1))<->(next(hmaster0)&(next(!hmaster1))))));
guarantee
	G((((decide&hlock1)&next(hgrant1))->next(hlocked)));
guarantee
	G(((!decide)->((!hgrant1)<->(next(!hgrant1)))));
guarantee
	GF (((hmaster0&(!hmaster1))|(!hbusreq1)));
guarantee
	GF ((((!hmaster0)&hmaster1)|(!hbusreq2)));
