
module ColorSortLTLUnrealizable2_791_ColorSort_unrealizable

env boolean color_0;
env boolean color_1;
env boolean color_2;
assumption
	G (!(color_0 & color_1 & !color_2));
assumption
	G (!(color_0 & color_1 & color_2));

env boolean detect_0;
env boolean detect_1;
env boolean detect_2;
assumption
	G (!(detect_0 & detect_1 & !detect_2));
assumption
	G (!(detect_0 & detect_1 & detect_2));

env boolean ack_ver_0;

env boolean ack_hor_0;

env boolean ack_bot_0;

env boolean starting_pos_0;

env boolean edge_0;

env boolean speedButton_0;

env boolean haltButton_0;


sys boolean verMot_0;

sys boolean horMot_0;

sys boolean botMot_0;
sys boolean botMot_1;



sys boolean spec_currentColor_0;
sys boolean spec_currentColor_1;
sys boolean spec_currentColor_2;

sys boolean spec_dropping;
sys boolean spec_pauseButtonValidPressed;
sys boolean spec_pausing_0;


aux boolean sYS_CONSTRAINT_0_respondsTo_responded;
aux boolean eNV_CONSTRAINT_1_respondsTo_responded;
aux boolean eNV_CONSTRAINT_2_respondsTo_responded;
aux boolean eNV_CONSTRAINT_3_respondsTo_responded;
aux boolean pREV_aux_4;
aux boolean pREV_aux_5;

assumption
	G ((!(spec_waiting_ack_ver_mot) -> (ack_ver_0)));
assumption
	G ((!(spec_waiting_ack_hor_mot) -> (ack_hor_0)));
assumption
	GF (!((!color_0 & !color_1 & color_2)));
assumption
	GF ((!ack_hor_0));
assumption
	GF (eNV_CONSTRAINT_1_respondsTo_responded);
assumption
	GF (eNV_CONSTRAINT_2_respondsTo_responded);
assumption
	GF (eNV_CONSTRAINT_3_respondsTo_responded);



guarantee
	G(((((!(spec_dropping)&(!starting_pos_0))&(((ack_ver_0)&(ack_hor_0))&(ack_bot_0)))&!((!color_0&!color_1&color_2)))<->(!verMot_0)));
guarantee
	G((((spec_dropping&!((((detect_0<->spec_currentColor_0)|(detect_1<->spec_currentColor_1)|(detect_2<->spec_currentColor_2)))))&((ack_ver_0)&(ack_hor_0)))<->(!botMot_0&!botMot_1)));
guarantee
	G((((spec_dropping&(((detect_0<->spec_currentColor_0)|(detect_1<->spec_currentColor_1)|(detect_2<->spec_currentColor_2))))&((ack_ver_0)&(ack_hor_0)))<->(!horMot_0)));
guarantee
	G((((!haltButton_0)&pREV_aux_5)<->spec_pauseButtonValidPressed));
guarantee
	G((((spec_pauseButtonValidPressed&(spec_pausing_0))|(!(spec_pauseButtonValidPressed)&(!spec_pausing_0)))->(next(!spec_pausing_0))));
guarantee
	G(((!spec_pausing_0)->(((verMot_0)&(horMot_0))&(!botMot_0&botMot_1))));
guarantee
	G((next(pREV_aux_5)<->(haltButton_0)));
