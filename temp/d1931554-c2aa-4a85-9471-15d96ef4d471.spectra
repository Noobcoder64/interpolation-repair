
module amba_ahb_w_guar_fairness_amba_ahb_1

env boolean hready;
env boolean hbusreq0;
env boolean hlock0;
env boolean hburst0;
env boolean hburst1;

sys boolean hmaster0;
sys boolean hmastlock;
sys boolean start;
sys boolean decide;
sys boolean hlocked;
sys boolean hgrant0;
sys boolean stateA1_0;
sys boolean stateG2_0;
sys boolean stateG3_0;
sys boolean stateG3_1;
sys boolean stateG3_2;


assumption
	 ((!hready));
assumption
	 ((!hbusreq0));
assumption
	 ((!hlock0));
assumption
	 ((!hburst0));
assumption
	 ((!hburst1));
assumption
	G ((hlock0 -> hbusreq0));
assumption
	GF ((!stateA1_0));
assumption
	GF (hready);

guarantee
	 ((!hmaster0));
guarantee
	 ((!hmastlock));
guarantee
	 (start);
guarantee
	 (decide);
guarantee
	 ((!hlocked));
guarantee
	 (hgrant0);
guarantee
	 ((!stateA1_0));
guarantee
	 ((!stateG2_0));
guarantee
	 ((!stateG3_0));
guarantee
	 ((!stateG3_1));
guarantee
	 ((!stateG3_2));
guarantee
	G ((((!stateA1_0) & ((!hmastlock) | (hburst0 | hburst1))) -> (next(!stateA1_0))));
guarantee
	G ((((!stateA1_0) & ((hmastlock & (!hmaster0)) & ((!hburst0) & (!hburst1)))) -> next(stateA1_0)));
guarantee
	G (((stateA1_0 & hbusreq0) -> next(stateA1_0)));
guarantee
	G (((stateA1_0 & (!hbusreq0)) -> (next(!stateA1_0))));
guarantee
	G (((!hready) -> (next(!start))));
guarantee
	G ((((!stateG2_0) & (!hmastlock)) -> (next(!stateG2_0))));
guarantee
	G ((((!stateG2_0) & (!start)) -> (next(!stateG2_0))));
guarantee
	G ((((!stateG2_0) & hburst0) -> (next(!stateG2_0))));
guarantee
	G ((((!stateG2_0) & hburst1) -> (next(!stateG2_0))));
guarantee
	G ((((!stateG2_0) & !((!hmaster0))) -> (next(!stateG2_0))));
guarantee
	G ((((((((!stateG2_0) & hmastlock) & start) & (!hburst0)) & (!hburst1)) & (!hmaster0)) -> next(stateG2_0)));
guarantee
	G ((((stateG2_0 & (!start)) & hbusreq0) -> next(stateG2_0)));
guarantee
	G (((stateG2_0 & start) -> FALSE));
guarantee
	G ((((stateG2_0 & (!start)) & (!hbusreq0)) -> (next(!stateG2_0))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & (!stateG3_2)) & (((!hmastlock) | (!start)) | (hburst0 | (!hburst1)))) -> (((next(!stateG3_0)) & (next(!stateG3_1))) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & (!stateG3_2)) & (((hmastlock & start) & ((!hburst0) & hburst1)) & (!hready))) -> ((next(stateG3_0) & (next(!stateG3_1))) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & (!stateG3_2)) & (((hmastlock & start) & ((!hburst0) & hburst1)) & hready)) -> (((next(!stateG3_0)) & next(stateG3_1)) & (next(!stateG3_2)))));
guarantee
	G (((((stateG3_0 & (!stateG3_1)) & (!stateG3_2)) & ((!start) & (!hready))) -> ((next(stateG3_0) & (next(!stateG3_1))) & (next(!stateG3_2)))));
guarantee
	G (((((stateG3_0 & (!stateG3_1)) & (!stateG3_2)) & ((!start) & hready)) -> (((next(!stateG3_0)) & next(stateG3_1)) & (next(!stateG3_2)))));
guarantee
	G (((((stateG3_0 & (!stateG3_1)) & (!stateG3_2)) & start) -> FALSE));
guarantee
	G ((((((!stateG3_0) & stateG3_1) & (!stateG3_2)) & ((!start) & (!hready))) -> (((next(!stateG3_0)) & next(stateG3_1)) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & stateG3_1) & (!stateG3_2)) & ((!start) & hready)) -> (next(stateG3_0 & stateG3_1) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & stateG3_1) & (!stateG3_2)) & start) -> FALSE));
guarantee
	G (((((stateG3_0 & stateG3_1) & (!stateG3_2)) & ((!start) & (!hready))) -> (next(stateG3_0 & stateG3_1) & (next(!stateG3_2)))));
guarantee
	G (((((stateG3_0 & stateG3_1) & (!stateG3_2)) & ((!start) & hready)) -> (((next(!stateG3_0)) & (next(!stateG3_1))) & next(stateG3_2))));
guarantee
	G (((((stateG3_0 & stateG3_1) & (!stateG3_2)) & start) -> FALSE));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & stateG3_2) & ((!start) & (!hready))) -> (((next(!stateG3_0)) & (next(!stateG3_1))) & next(stateG3_2))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & stateG3_2) & ((!start) & hready)) -> (((next(!stateG3_0)) & (next(!stateG3_1))) & (next(!stateG3_2)))));
guarantee
	G ((((((!stateG3_0) & (!stateG3_1)) & stateG3_2) & start) -> FALSE));
guarantee
	G ((hready -> (hgrant0 <-> (next(!hmaster0)))));
guarantee
	G ((hready -> ((!hlocked) <-> (next(!hmastlock)))));
guarantee
	G (((next(!start)) -> ((!hmaster0) <-> (next(!hmaster0)))));
guarantee
	G (((next(!start)) -> (hmastlock <-> next(hmastlock))));
guarantee
	G ((((decide & hlock0) & next(hgrant0)) -> next(hlocked)));
guarantee
	G ((((decide & (!hlock0)) & next(hgrant0)) -> (next(!hlocked))));
guarantee
	G (((decide & (!hbusreq0)) -> next(hgrant0)));
guarantee
	G (((!decide) -> ((!hgrant0) <-> (next(!hgrant0)))));
guarantee
	G (((!decide) -> ((!hlocked) <-> (next(!hlocked)))));
guarantee
	GF (stateG2_0);
guarantee
	GF ((!stateG2_0));
guarantee
	GF ((((!stateG3_0) & (!stateG3_1)) & (!stateG3_2)));
guarantee
	GF (((!hmaster0) | (!hbusreq0)));



assumption
	GF (!(hburst1));

assumption
	GF (!(hburst0));

assumption
	G((hburst1) -> next(!(hburst0)));

assumption
	G((hburst1 & !hready) -> next(!(!hready)));

assumption
	G(!(!hready));
